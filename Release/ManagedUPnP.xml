<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ManagedUPnP</name>
    </assembly>
    <members>
        <member name="T:ManagedUPnP.WindowsFirewall">
            <summary>
            Encapsulates a static class to check the Windows firewall
            to ensure that it is set to allow UPnP and SSDP network
            traffic through. Note that on Windows Vista and above this
            method of getting the state will work, but setting will fail,
            see the CheckUPnPFirewallRules method.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.mosOperatingSystem">
            <summary>
            Holds the operating system information.
            </summary>
        </member>
        <member name="M:ManagedUPnP.WindowsFirewall.GetOSVersion">
            <summary>
            Gets the OS version as a single flags enumeration.
            </summary>
            <returns>The OS version os Unknown if undetermined.</returns>
        </member>
        <member name="M:ManagedUPnP.WindowsFirewall.AddServicePacks(ManagedUPnP.WindowsFirewall.OperatingSystem,System.String,System.String[],ManagedUPnP.WindowsFirewall.OperatingSystem[])">
            <summary>
            Adds service pack values to an OperatingSystem enumeration based
            on the Service Pack string.
            </summary>
            <param name="value">The value to add the service pack enumeration flags to.</param>
            <param name="servicePack">The service pack string.</param>
            <param name="searches">The string searches to use.</param>
            <param name="results">The results for each string search to use binary or with.</param>
            <returns>The new operating system enumeration value.</returns>
        </member>
        <member name="M:ManagedUPnP.WindowsFirewall.CreateCOMObject(System.String)">
            <summary>
            Creates a COM Object by name.
            </summary>
            <param name="comName">The Application name of the COM Object to create.</param>
            <returns>The created COM object or null if not available.</returns>
        </member>
        <member name="M:ManagedUPnP.WindowsFirewall.UPnPService(System.Object@)">
            <summary>
            Gets the windows firwall service exception for UPnP.
            </summary>
            <param name="profile">On return, contains the profile information.</param>
            <returns>The service object (http://msdn.microsoft.com/en-us/library/windows/desktop/aa366421(v=VS.85)</returns>
        </member>
        <member name="M:ManagedUPnP.WindowsFirewall.GetWindowsUPnPFirewallStatus">
            <summary>
            Gets the status of the Windows Firewall and UPnP exception.
            </summary>
            <returns>The status found.</returns>
        </member>
        <member name="M:ManagedUPnP.WindowsFirewall.SetWindowsUPnPFirewallStatus(ManagedUPnP.WindowsFirewall.Status)">
            <summary>
            Sets the status of the Windows Firewall and UPnP exception.
            </summary>
            <param name="value">The status to set, only Open and Closed are valid.</param>
        </member>
        <member name="M:ManagedUPnP.WindowsFirewall.CheckUPnPFirewallRules(System.Windows.Forms.IWin32Window)">
            <summary>
            Checks to ensure that the Widnows Firewall allows UPnP traffic and
            asks the user if it is OK to enable the exception if it is possible
            to do so, other tells the user they must do it manually.
            </summary>
            <param name="dialogOwner">The owner of any message box, or null for none.</param>
            <returns>True if the firewall is now Open to UPnP traffic, false otherwise.</returns>
        </member>
        <member name="P:ManagedUPnP.WindowsFirewall.OSVersion">
            <summary>
            Gets the Windows OS Version.
            </summary>
        </member>
        <member name="P:ManagedUPnP.WindowsFirewall.UPnPPortsOpen">
            <summary>
            Gets or sets the status of the Windows Firewall UPnP network traffic exception. 
            Only Open and Closed are valid for setting.
            </summary>
        </member>
        <member name="T:ManagedUPnP.WindowsFirewall.Scope">
            <summary>
            Encapsulates the Scope property of the NetFwTypeLib type library.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.Scope.All">
            <summary>
            All.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.Scope.LocalSubnet">
            <summary>
            Local Subnet.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.Scope.Custom">
            <summary>
            Custom.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.Scope.Max">
            <summary>
            Max.
            </summary>
        </member>
        <member name="T:ManagedUPnP.WindowsFirewall.ServiceType">
            <summary>
            Encapsulates the ServiceType property of the NetFwTypeLib type library.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.ServiceType.FileAndPrint">
            <summary>
            File and print.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.ServiceType.UPnP">
            <summary>
            UPnP.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.ServiceType.RemoteDesktop">
            <summary>
            Remote Desktop.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.ServiceType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.ServiceType.Max">
            <summary>
            Max.
            </summary>
        </member>
        <member name="T:ManagedUPnP.WindowsFirewall.Status">
            <summary>
            Encapsulates the status of the Windows Firewall and
            UPnP Framework exception.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.Status.None">
            <summary>
            Status Uninitialised.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.Status.FirewallNotEnabled">
            <summary>
            The windows firewall is not enabled.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.Status.ExceptionsNotAllowed">
            <summary>
            Exceptions are not allowed.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.Status.Open">
            <summary>
            The firewall is open to UPnP traffic.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.Status.Closed">
            <summary>
            The firewall is closed to UPnP traffic.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.Status.Unknown">
            <summary>
            The firewall is in an unknown state.
            </summary>
        </member>
        <member name="T:ManagedUPnP.WindowsFirewall.OperatingSystem">
            <summary>
            Encapsulates the Operating System Version
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.Unknown">
            <summary>
            Unknown or invalid.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.Windows_32Bit_x86">
            <summary>
            32-Bit version of windows.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.Windows_64Bit_x64">
            <summary>
            64-Bit version of windows.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.WindowsWin32s">
            <summary>
            Win32s.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.Windows95">
            <summary>
            Windows 95.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.Windows98">
            <summary>
            Windows 98.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.WindowsME">
            <summary>
            Windows ME.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.WindowsNT">
            <summary>
            Windows NT.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.Windows2000">
            <summary>
            Windows 2000.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.WindowsXP">
            <summary>
            Windows XP.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.WindowsCE">
            <summary>
            Windows CE.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.Windows2003">
            <summary>
            Windows 2003.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.WindowsVista">
            <summary>
            Windows Vista.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.Windows7">
            <summary>
            Windows 7.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.Windows98_SE">
            <summary>
            Windows 98 SE.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.WindowsNT_351">
            <summary>
            Windows NT 3.5.1.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.WindowsNT_40">
            <summary>
            Windows NT 4.0.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.Windows2000_SP1">
            <summary>
            Windows 2000 Service Pack 1.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.Windows2000_SP2">
            <summary>
            Windows 2000 Service Pack 2.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.Windows2000_SP3">
            <summary>
            Windows 2000 Service Pack 3.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.Windows2000_SP4">
            <summary>
            Windows 2000 Service Pack 4.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.WindowsXP_SP1">
            <summary>
            Windows XP Service Pack 1.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.WindowsXP_SP2">
            <summary>
            Windows XP Service Pack 2.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.WindowsXP_SP3">
            <summary>
            Windows XP Service Pack 3.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.WindowsVista_SP1">
            <summary>
            Windows Vista Service Pack 1.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.WindowsVista_SP2">
            <summary>
            Windows Vista Service Pack 2.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.Windows7_SP1">
            <summary>
            Windows 7 Service Pack 1.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.Architecture">
            <summary>
            All architecture flags.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.Release">
            <summary>
            All Windows Release flags.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.EditionServicePack">
            <summary>
            All windows Edition and Service Pack flags.
            </summary>
        </member>
        <member name="F:ManagedUPnP.WindowsFirewall.OperatingSystem.LaterVersion">
            <summary>
            A later version of windows then this enumeration supports.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Extensions.IPAddressExtensions">
            <summary>
            Provides extension methods to the IP Address class.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Extensions.IPAddressExtensions.GetNetworkAddress(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Returns the Network Address (Subnet) from an IPAddress and Subnet.
            </summary>
            <param name="address">The IP address to apply the subnet mask to.</param>
            <param name="subnetMask">The subnet mask to apply to the IP address.</param>
        </member>
        <member name="M:ManagedUPnP.Extensions.IPAddressExtensions.IPAddressFromBitsSet(System.Byte,System.Byte)">
            <summary>
            Gets an IP address of a certain size with a certain number of MSBs set for sub netting.
            </summary>
            <param name="totalBits">The total number of bits for the IP Address (must be multiple of 8).</param>
            <param name="setBits">The number of bits to set (must be less than or equal to Totalbits).</param>
            <returns>The created IPAddress.</returns>
        </member>
        <member name="M:ManagedUPnP.Extensions.IPAddressExtensions.ByteArrayFromBitsSet(System.Byte,System.Byte)">
            <summary>
            Gets a set of bytes as an array with a total number of bits and certain number of MSB set.
            </summary>
            <param name="totalBits">The total number of bits for the bytes (must be multiple of 8).</param>
            <param name="setBits">The number of bits to set (must be less tahn or equal to TotalBits).</param>
            <returns>An array of bytes with the bits set.</returns>
        </member>
        <member name="M:ManagedUPnP.Extensions.IPAddressExtensions.GetSetBits(System.Byte)">
            <summary>
            Gets a byte with a certain number of bits set.
            </summary>
            <param name="bits">The number of bits set (0 to 8).</param>
            <returns></returns>
        </member>
        <member name="M:ManagedUPnP.Extensions.IPAddressExtensions.ConnectableFrom(System.Net.IPAddress,System.Net.NetworkInformation.UnicastIPAddressInformation)">
            <summary>
            Gets whether an IP address is connectable from an interface described
            by unicast address info by checking the subnet ID. Compatible with IPv4 and
            IPv6 addresses. 
            </summary>
            <param name="address">The address to check for connectivity.</param>
            <param name="fromAddress">The unicase ip address information describing the interface.</param>
            <returns>True if on the same subnet, false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Extensions.IPAddressExtensions.SameSubnetAs(System.Net.IPAddress,System.Net.IPAddress,System.Byte)">
            <summary>
            Compares if 2 IPv6 addresses are within the same Subnet using the Subnet Mask
            </summary>
            <param name="address1">The first IPv4 address to compare the network IDs for.</param>
            <param name="address2">The second IPv4 address to compare the network IDs for.</param>
            <param name="subnetBits">The number of MSBs to use for comparing the subnet.</param>
            <returns>True if they are part of the same subnet</returns>
        </member>
        <member name="M:ManagedUPnP.Extensions.IPAddressExtensions.SameSubnetAs(System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Compares if 2 IPv4 addresses are within the same Subnet using the Subnet Mask
            </summary>
            <param name="address1">The first IPv4 address to compare the network IDs for.</param>
            <param name="address2">The second IPv4 address to compare the network IDs for.</param>
            <param name="subnetMask">The IPv4 subnet mask to apply to the addreses.</param>
            <returns>True if they are part of the same subnet</returns>
        </member>
        <member name="T:ManagedUPnP.StateVariableChangedEventHandler">
            <summary>
            Event handler for when a state variable changed.
            </summary>
            <param name="sender">The sender of the events.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ManagedUPnP.IAutoDiscoveryService">
            <summary>
            Encapsulates an object which contains a service.
            </summary>
        </member>
        <member name="P:ManagedUPnP.IAutoDiscoveryService.Service">
            <summary>
            Gets the service for this auto discovery service.
            </summary>
        </member>
        <member name="T:ManagedUPnP.StateVariableChangedEventHandler`1">
            <summary>
            Event handler for when a state variable changed.
            </summary>
            <typeparam name="T">The data type for the state variable.</typeparam>
            <param name="sender">The sender of the events.</param>
            <param name="a">The event arguments.</param>
        </member>
        <member name="T:ManagedUPnP.DeviceAddedEventArgs">
            <summary>
            The arguments for the device added event.
            </summary>
        </member>
        <member name="F:ManagedUPnP.DeviceAddedEventArgs.mdCOMDevice">
            <summary>
            The native com device for the device added.
            </summary>
        </member>
        <member name="F:ManagedUPnP.DeviceAddedEventArgs.mdDevice">
            <summary>
            The device added.
            </summary>
        </member>
        <member name="F:ManagedUPnP.DeviceAddedEventArgs.mgInterfaceGuid">
            <summary>
            The network interface Guid for the device.
            </summary>
        </member>
        <member name="F:ManagedUPnP.DeviceAddedEventArgs.mbInterfaceGuidAvailable">
            <summary>
            True if the network interface Guid is available.
            </summary>
        </member>
        <member name="M:ManagedUPnP.DeviceAddedEventArgs.#ctor(UPNPLib.IUPnPDevice)">
            <summary>
            Creates a new device added event arguments.
            </summary>
            <param name="device">The underlying COM device that was added.</param>
        </member>
        <member name="M:ManagedUPnP.DeviceAddedEventArgs.#ctor(UPNPLib.IUPnPDevice,ManagedUPnP.DeviceAddedEventArgs)">
            <summary>
            Creates a new device added event arguments.
            </summary>
            <param name="device">The underlying COM device that was added.</param>
            <param name="baseArgs">The base args to get other event information from.</param>
        </member>
        <member name="M:ManagedUPnP.DeviceAddedEventArgs.#ctor(UPNPLib.IUPnPDevice,System.Guid)">
            <summary>
            Creates a new device added event arguments.
            </summary>
            <param name="device">The underlying COM device that was added.</param>
            <param name="interfaceGuid">The network interface guid.</param>
        </member>
        <member name="P:ManagedUPnP.DeviceAddedEventArgs.COMDevice">
            <summary>
            The native underlying COM device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.DeviceAddedEventArgs.InterfaceGuid">
            <summary>
            Gets the network interface Guid if its available.
            </summary>
        </member>
        <member name="P:ManagedUPnP.DeviceAddedEventArgs.InterfaceGuidAvailable">
            <summary>
            Gets whether the network interface Guid is available.
            </summary>
        </member>
        <member name="P:ManagedUPnP.DeviceAddedEventArgs.Device">
            <summary>
            Gets the device for the device added event arguments.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.ArgumentDirection">
            <summary>
            Encapsulates the direction of an actions argument.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.ArgumentDirection.Unknown">
            <summary>
            Unknown direction.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.ArgumentDirection.In">
            <summary>
            Input only.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.ArgumentDirection.Out">
            <summary>
            Output only.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.RootDescription">
            <summary>
            Encapsulates a root description.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.Description">
            <summary>
            Encapsulates an XML element description.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.Description.mdUsedPropCache">
            <summary>
            Stores the used properties for a type.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.Description.mdProperties">
            <summary>
            Stores the properties for this object.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.Description.mdParent">
            <summary>
            The parent description object, or null if root description.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.Description.#ctor(ManagedUPnP.Descriptions.Description)">
            <summary>
            Creates a new description.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.Description.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates a new description from an XML reader.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The XML reader to get the information from.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.Description.Initialise">
            <summary>
            Initialises any fields for the description.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.Description.IsStartNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.Description.IsEndNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.Description.ProcessReader(System.Xml.XmlTextReader)">
            <summary>
            Processes the description from an XML reader.
            </summary>
            <param name="reader">The XML reader.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.Description.Indent(System.Int32)">
            <summary>
            Gets the string for an indent.
            </summary>
            <param name="indent">The indentation for the string.</param>
            <returns>The indent string.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.Description.UseNode(System.Xml.XmlTextReader,System.String)">
            <summary>
            Uses an XML node for this description.
            </summary>
            <param name="reader">The XML reader to use the node from.</param>
            <param name="lastNodeName">The last node name.</param>
            <returns>True if the node was processed false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.Description.GetParentFrom(System.Int32)">
            <summary>
            Gets a parent from a certain generation.
            </summary>
            <param name="generation">The generation to get the parent for (0 == direct parent).</param>
            <returns>The description of the parent object or null if not available.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.Description.GetPropertyInt(System.String,System.Int32)">
            <summary>
            Gets a property value as an integer.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="defaultValue">The default value if conversion fails.</param>
            <returns>An integer.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.Description.GetPropertyDouble(System.String,System.Double)">
            <summary>
            Gets a property value as a double.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="defaultValue">The default value if conversion fails.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.Description.GetPropertyString(System.String,System.String)">
            <summary>
            Gets a property value as a string.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="defaultValue">The default value if it fails.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.Description.ToString">
            <summary>
            Converts the description to a string.
            </summary>
            <returns>The string representation for the description.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.Description.ToString(System.Int32)">
            <summary>
            Converts the description to a string.
            </summary>
            <param name="indent">The indent for the string.</param>
            <returns>The string representation for the description.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.Description.GetUnusedProperties">
            <summary>
            Gets the unused properties by the class and their values.
            </summary>
            <returns>The enumerable list of properties and their values.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.Description.GetUsedPropertyNames">
            <summary>
            Gets a hashset of the used properties by this description.
            </summary>
            <returns>The hashset of used properties.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.Description.Parent">
            <summary>
            Gets the parent description object or null if this is a root description.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.RootDescription.msElement">
            <summary>
            The element name for an icon.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.RootDescription.msSchema">
            <summary>
            The XML schema document code. 
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.RootDescription.msvSpecVersion">
            <summary>
            The document version of the specification.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.RootDescription.mdDevice">
            <summary>
            The root device for the description.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.RootDescription.msDocumentURL">
            <summary>
            The document URL for this root description.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.RootDescription.IsStartNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.RootDescription.IsEndNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.RootDescription.#ctor(System.String,System.Xml.XmlTextReader)">
            <summary>
            Gets the root description for a reader.
            </summary>
            <param name="documentURL">The URL for this root description.</param>
            <param name="reader">The XML reader to get the root description from.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.RootDescription.IsStartNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.RootDescription.IsEndNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.RootDescription.UseNode(System.Xml.XmlTextReader,System.String)">
            <summary>
            Uses an XML node for this description.
            </summary>
            <param name="reader">The XML reader to use the node from.</param>
            <param name="lastNodeName">The last node name.</param>
            <returns>True if the node was processed false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.RootDescription.FindDevice(System.String)">
            <summary>
            Finds a device description recursively by UDN.
            </summary>
            <param name="udn">The UDN to search for.</param>
            <returns>The device description found or null if not found.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.RootDescription.ToStringWithFullServices(System.Int32)">
            <summary>
            Gets this device description with full service information.
            </summary>
            <param name="indent">The indent for the string.</param>
            <returns>The string representation of the device.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.RootDescription.ToString(System.Int32)">
            <summary>
            Converts the description to a string.
            </summary>
            <param name="indent">The indent for the string.</param>
            <returns>The string representation for the description.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.RootDescription.SpecVersion">
            <summary>
            Gets the spec version of the XML document from which this description came.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.RootDescription.DocumentURL">
            <summary>
            Gets the URL for this root device document description.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.RootDescription.Device">
            <summary>
            Gets the root device description for this device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.RootDescription.Schema">
            <summary>
            Gets the document schema link for this root description.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.RootDescription.URLBase">
            <summary>
            Gets the base URL for this root device.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Components.NamespaceDoc">
            <summary>
            The ManagedUPnP.Components namespace contains classes for
            support <see cref="N:System.Windows.Forms"/> components.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Components.UPnPLogInterceptor">
             <summary>
             Encapsulates a windows forms component which
             can capture the ManagedUPnP internal log information
             and raise the events using thread safe GUI methods.
             </summary>
             <example>
                 <code>
                     using ManagedUPnP;
            				
                     // Design code
                     private void InitializeComponent()
                     {
                     	this.LogIntercept = new UPnPLogInterceptor();
                     	this.LogIntercept.LogLines += new LogLinesEventHandler(Logging_LogLines);
                     	this.LogIntercept.Enabled = true;
                     }
            				
                     private ManagedUPnP.Components.UPnPLogInterceptor LogIntercept;
                     private System.Windows.Forms.TextBox tbLog;
            
                     // GUI Code
                     private void LogIntercept_LogLines(object sender, LogLinesEventArgs e)
                     {
                         tbLog.AppendText(String.Format("{0}{1}\r\n", e.Lines, new String(' ', e.Indent)));
                     }
                 </code>
             </example>
        </member>
        <member name="F:ManagedUPnP.Components.UPnPLogInterceptor.mbDefEnabled">
            <summary>
            The default enabled value.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.UPnPLogInterceptor.mbEnabled">
            <summary>
            True if the log interceptor is enabled.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.UPnPLogInterceptor.moLockObject">
            <summary>
            The locking object used to ensure thread safety.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPLogInterceptor.#ctor">
            <summary>
            Creates a new LogInterceptor.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPLogInterceptor.OnLogLines(ManagedUPnP.LogLinesEventArgs)">
            <summary>
            Calls the LogLines event handler with GUI thread safety.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPLogInterceptor.Logging_LogLines(System.Object,ManagedUPnP.LogLinesEventArgs)">
            <summary>
            Raised when new lines are sent from the log.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPLogInterceptor.Dispose(System.Boolean)">
            <summary>
            Disposes of the LogInterceptor.
            </summary>
            <param name="disposeManaged">True to dispose managed resources.</param>
        </member>
        <member name="E:ManagedUPnP.Components.UPnPLogInterceptor.LogLines">
            <summary>
            Occurs when new lines have been posted to the log.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Components.UPnPLogInterceptor.Enabled">
            <summary>
            Gets or sets the enabled status of this
            log interceptor.
            </summary>
            <remarks>
            Setting this value to true will also ensure that the
            global ManagedUPnP.Logging.Enabled property is also true,
            settings this value to false does not change the 
            ManagedUPnP.Logging.Enabled value in any way.
            </remarks>
        </member>
        <member name="T:ManagedUPnP.CodeGen.StringConstants">
            <summary>
            Encapsulates a class to create and manage a set of string constants
            where each constant can have a base group and name as part of its 
            code identifier.
            </summary>
        </member>
        <member name="F:ManagedUPnP.CodeGen.StringConstants.mcgCodeGenProvider">
            <summary>
            The code generation constant provider to use.
            </summary>
        </member>
        <member name="F:ManagedUPnP.CodeGen.StringConstants.mdConstants">
            <summary>The constants currently added.</summary>
            <remarks>Keys - Group, [Value, ConstantData].</remarks>
        </member>
        <member name="M:ManagedUPnP.CodeGen.StringConstants.#ctor(ManagedUPnP.CodeGen.ICodeGenProvider)">
            <summary>
            Creates a new device class code generator.
            </summary>
            <param name="codeGenProvider">The provider to use when generating the code.</param>
        </member>
        <member name="M:ManagedUPnP.CodeGen.StringConstants.MakeConstantName(System.String,System.String)">
            <summary>
            Makes a constant name based on group and value.
            </summary>
            <param name="group">The group for the constant.</param>
            <param name="name">The value for the constant.</param>
            <returns>The name of the constant.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.StringConstants.Definitions">
            <summary>
            Gets the definitions for all constants.
            </summary>
            <returns>The definitions for all the constants.</returns>
        </member>
        <member name="P:ManagedUPnP.CodeGen.StringConstants.Item(System.String,System.String,System.String,System.String)">
            <summary>
            Gets and adds if necessary, the constant name for a group, name and value.
            </summary>
            <param name="group">The group for the constant.</param>
            <param name="name">The name for the constant.</param>
            <param name="value">The value for the constant.</param>
            <param name="commentText">The comment for the constant.</param>
            <returns>The name of the constant.</returns>
        </member>
        <member name="P:ManagedUPnP.CodeGen.StringConstants.Item(System.String,System.String,System.String)">
            <summary>
            Gets and adds if necessary, the constant name for a group and value.
            </summary>
            <param name="group">The group for the constant.</param>
            <param name="value">The value for the constant.</param>
            <param name="commentText">The comment for the constant.</param>
            <returns>The name of the constant.</returns>
        </member>
        <member name="P:ManagedUPnP.CodeGen.StringConstants.Item(System.String,System.String)">
            <summary>
            Gets and adds if necessary, the constant name for a group and value.
            </summary>
            <param name="group">The group for the constant.</param>
            <param name="value">The value for the constant.</param>
            <returns>The name of the constant.</returns>
        </member>
        <member name="P:ManagedUPnP.CodeGen.StringConstants.CodeGenProvider">
            <summary>
            Gets the code generation provider.
            </summary>
        </member>
        <member name="T:ManagedUPnP.CodeGen.StringConstants.ConstantData">
            <summary>
            Encapsulates the information for a constant.
            </summary>
        </member>
        <member name="F:ManagedUPnP.CodeGen.StringConstants.ConstantData.Identifier">
            <summary>
            The identifier for the constant.
            </summary>
        </member>
        <member name="F:ManagedUPnP.CodeGen.StringConstants.ConstantData.CommentText">
            <summary>
            The comment text for the constant.
            </summary>
        </member>
        <member name="M:ManagedUPnP.CodeGen.StringConstants.ConstantData.#ctor(System.String,System.String)">
            <summary>
            Creates a new constant data structure.
            </summary>
            <param name="identifier">The identifier for the constant.</param>
            <param name="commentText">The comment text for the constant.</param>
        </member>
        <member name="T:ManagedUPnP.Descriptions.IUPnPDeviceExtensions">
            <summary>
            Extends the IUPnPDevice interface.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.IUPnPDeviceExtensions.Description(UPNPLib.IUPnPDevice,ManagedUPnP.Descriptions.RootDescription)">
            <summary>
            Gets the device description for a device.
            </summary>
            <param name="device">The device to get the description for.</param>
            <param name="rootDescription">The root description for the device.</param>
            <returns>The device description or null if not found in the root description.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.IUPnPDeviceExtensions.RootDeviceDescription(UPNPLib.IUPnPDevice)">
            <summary>
            Gets the root description for a device.
            </summary>
            <param name="device">The device to get the root description.</param>
            <returns>The root description for the device.</returns>
        </member>
        <member name="T:ManagedUPnP.Descriptions.DeviceExtensions">
            <summary>
            Encapsulates extension methods for the device class relating to descriptions.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceExtensions.GetDescription(ManagedUPnP.Device,ManagedUPnP.Descriptions.RootDescription)">
            <summary>
            Gets the device description for this device from a root description.
            </summary>
            <param name="device">The device to get the device description for.</param>
            <param name="rootDescription">The root description to get the device description for.</param>
            <returns>A device description or null if not found.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceExtensions.RootDeviceDescription(ManagedUPnP.Device,System.Boolean)">
            <summary>
            Gets the device description for this devices root device.
            </summary>
            <param name="device">The device to get the root device description for.</param>
            <param name="useCache">True to use cached version, false otherwise.</param>
            <returns>The root description for this device or null if not available.</returns>
        </member>
        <member name="T:ManagedUPnP.CodeGen.CSharpCodeGenProvider">
            <summary>
            Provides the code generation constants for generating
            C# code.
            </summary>
        </member>
        <member name="T:ManagedUPnP.CodeGen.ICodeGenProvider">
            <summary>
            Encapsulates the ability to provide constants
            required for code generation. Classes implementing
            this interface are to be passed to the 
            <see cref="M:ManagedUPnP.CodeGen.DeviceGen.GenerateClassFor(ManagedUPnP.Device,System.String,System.String,ManagedUPnP.CodeGen.ClassScope,System.Boolean,System.Boolean,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})"/>
            and the 
            <see cref="M:ManagedUPnP.CodeGen.ServiceGen.GenerateClassFor(ManagedUPnP.Service,System.String,System.String,ManagedUPnP.CodeGen.ClassScope,System.Boolean,System.Boolean)"/>
            static methods.
            </summary>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ICodeGenProvider.GenerateRegion(System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Generates code for a region if content is available.
            </summary>
            <param name="regionName">The name of the region.</param>
            <param name="regionContent">The content of the region with one empty line at the end and none at the start.</param>
            <param name="addEmptyLineBeforeEnd">True to add empty line before region ending line.</param>
            <param name="addEmptyLineBeforeStart">True to add empty line before region start line.</param>
            <param name="indentation">The indentation (0 = non embedded class).</param>
            <returns>The string for the region.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ICodeGenProvider.CodeFriendlyIdentifier(System.String,System.Boolean)">
            <summary>
            Gets a code friendly identifier for a string.
            </summary>
            <param name="name">The string.</param>
            <param name="parameter">True if identifier is a parameter (ie. starts with lower case letter).</param>
            <returns>The code friendly identifier.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ICodeGenProvider.CodeFriendlyIdentifier(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a code friendly identifier for a string.
            </summary>
            <param name="name">The string.</param>
            <param name="parameter">True if identifier is a parameter (ie. starts with lower case letter).</param>
            <param name="allowUnderscores">True to allow underscores from the string.</param>
            <returns>The code friendly identifier.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ICodeGenProvider.GetClassScope(ManagedUPnP.CodeGen.ClassScope,System.String)">
            <summary>
            Gets the class scope for a ClassScope enumeration.
            </summary>
            <param name="classScope">The class scope enumeration.</param>
            <param name="addAfter">The string to add after the scope if it is available.</param>
            <returns>The class scope as a string.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ICodeGenProvider.ArraySizeForCount(System.Int32)">
            <summary>
            Gets the array initialiser size for a specific count.
            </summary>
            <param name="inArgumentCount">The number of elements to be in the array.</param>
            <returns>A string defining the number of elements in the array.</returns>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.PartialClassFileExtension">
            <summary>
            Gets the full file extension for a partial class.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ClassFileExtension">
            <summary>
            Gets the full file extension for class.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ConstantIdentifyer">
            <summary>Gets the code for the constant name.</summary>
            <remarks>Format Parameters: 0 = typeName, 1 = valueName.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ConstantGroupDefinition">
            <summary>Gets the code for the constant group definition.</summary>
            <remarks>Format Parameters: 0 = type, 1 = constantDefinitions.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ConstantComment">
            <summary>Gets the code for the constant comment.</summary>
            <remarks>Format Parameters: 0 = commentText.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ConstantDefinition">
            <summary>Gets the code for the constant definition.</summary>
            <remarks>Format Parameters: 0 = VarName, 1 = value, 2 = comments</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.StateVarNameGroup">
            <summary>
            Gets the group name for state variable constant identifiers.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.AllowedValueGroup">
            <summary>
            Gets the group name for state variable allowed value constant identifiers.
            </summary>
            <remarks>Format Parameters: 0 = StateVarFriendlyName.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ActionNameGroup">
            <summary>
            Gets the group name for action constant identifiers.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ServiceGroup">
            <summary>
            Gets the group name for service constant identifiers.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.DeviceGroup">
            <summary>
            Gets the group name for device constant identifiers.
            </summary>
            <remarks>Format Parameters: 0 = StateVarFriendlyName</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ProtectedConstants">
            <summary>
            Gets the protected constants region name.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.PublicProperties">
            <summary>
            Gets the public properties region name.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ProtectedMethods">
            <summary>
            Gets the protected methods region name.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.PublicEnumerations">
            <summary>
            Gets the public enumerations region name.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.EventHandlers">
            <summary>
            Gets the event handlers region name.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.EventCallers">
            <summary>
            Gets the event callers region name.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.Region">
            <summary>
            Gets the code for a region.
            </summary>
            <remarks>Format Parameters: 0 = regionName, 1 = regionCode, 2 = indentation, 3 = beforeEnd, 4 = beforeStart.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.Null">
            <summary>
            Gets the Null value for an object.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.PartialClass">
            <summary>
            Gets the partial class statement.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.Public">
            <summary>
            Gets the public modifier statement.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.Service">
            <summary>
            Gets the name of the service class.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.Device">
            <summary>
            Gets the name of the device class.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ServiceID">
            <summary>
            Gets the string to append to the string constant names for service IDs.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.DeviceType">
            <summary>
            Gets the string to append to the string constant names for device Types.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.DeviceModelName">
            <summary>
            Gets the string to append to the string constant names for device model names.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.Space">
            <summary>
            Gets a space.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.IndentChar">
            <summary>
            Gets the indent char to use for indentation of code.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.EmptyLine">
            <summary>
            Gets the string representing and empty line.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.UnknownType">
            <summary>
            Gets the type for a parameter when it cannot be determined.
            </summary>
            <remarks>This can occur if a related state variable definition is missing.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ParameterSeperator">
            <summary>
            Gets a comma for delimiting parameters.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.Comma">
            <summary>
            Gets a comma with a trailing space.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.UsingClause">
            <summary>
            Gets the definition for a using clause.
            </summary>
            <remarks>
            Format Parameters:
            0 = Using namespace.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ServiceIdConstComment">
            <summary>
            Gets the definition for the service ID constant comment.
            </summary>
            <remarks>Format Parameters: 0 = service friendly name.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.DeviceTypeConstComment">
            <summary>
            Gets the definition for the device type constant comment.
            </summary>
            <remarks>Format Parameters: 0 = device friendly name.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.GenericDeviceRet">
            <summary>
            Gets the definition for the generic device return value.
            </summary>
            <remarks>
            Format Parameters:
            0 = DeviceClass, 1 = DeviceType.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.GenericServiceRet">
            <summary>
            Gets the definition for the generic service return value.
            </summary>
            <remarks>
            Format Parameters:
            0 = ServiceClass, 1 = ServiceId.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.SpecificDeviceRet">
            <summary>
            Gets the definition for the specific device return value.
            </summary>
            <remarks>
            Format Parameters:
            0 = DeviceClass, 1 = DeviceType.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.SpecificServiceRet">
            <summary>
            Gets the definition for the specific service return value.
            </summary>
            <remarks>
            Format Parameters:
            0 = ServiceClass, 0 = ServiceId.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.Property">
            <summary>
            Gets the definition for a public property.
            </summary>
            <remarks>
            Format Parameters:
            0 = returnType, 1 = propStartName, 2 = propEndName,
            3 = returnValue, 4 = Device/Service name, 5 = Device/Service type, 6 = "Device" / "Service"
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.DeviceClassHeaderComment">
            <summary>
            Gets the code for the comments as the class header.
            </summary>
            <remarks>
            Format Parameters:
            0 = rootDeviceName, 1 = rootDeviceType, 2 = serialNumber
            3 = deviceName, 4 = deviceType,
            5 = dateTime, 6 = className,
            7 = namespaceName, 8 = classScope,
            9 = partialClass.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.DeviceBase">
            <summary>
            Gets the definition for the entire device class.
            </summary>
            <remarks>
            Format Parameters:
            0 = using, 1 = namespace, 2 = classScope, 3 = "partial " if partial class, 
            4 = className, 5 = protectedConstants, 6 = DeviceType, 7 = proprties,
            8 = DeviceModelName, 9 = classHeaderComment
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.AllowedValueComment">
            <summary>
            Gets the comment for the allowed value constants.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.StateVarNameComment">
            <summary>
            Gets the comment for the state var name constants.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ActionNameComment">
            <summary>
            Gets the comment for the action name constants.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.EnumStateVarName">
            <summary>
            Gets the name for an enum state var type.
            </summary>
            <remarks>Format Parameters: 0 = StateVarFriendlyName.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.StateVarEnum">
            <summary>
            Gets the definition for an enum state var type.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarName, 1 = stateVarValues.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.EnumStateVarEventConversion">
            <summary>
            Gets the code used to convert non enum state var value to typed value.
            </summary>
            <remarks>Format Parameters: 0 = stateVarFriendlyName</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.EnumStateVarValue">
            <summary>
            Gets an enumeration value for an enum state variable.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarEnumValue, 1 = stateVarName
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.NonEnumStateVar">
            <summary>
            Gets the definition for the property of a non enum state variable.
            </summary>
            <remarks>
            Format Parameters:
            0 = returnType, 1 = stateVarFriendlyName, 2 = stateVarName, 3 = state var comment
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.NonEnumStateVarEventConversion">
            <summary>
            Gets the code used to convert non enum state var value to typed value.
            </summary>
            <remarks>Format Parameters: 0 = stateVarType</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.EnumParseCaseStatement">
            <summary>
            Gets the parsing case statement for an enum type.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarValue, 1 = stateVarName, 2 = stateVarEnumValue.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.EnumToStringCaseStatement">
            <summary>
            Gets the to string case statement for an enum type.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarName, 1 = stateVarEnumValue, 2 = stateVarValue.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.StateVariableEventHandler">
            <summary>
            Gets the event handler definition for state variable changes.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarType, 1 = stateVarName.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.StateVariableEventCaller">
            <summary>
            Gets the event caller definition for state variable changes.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarType, 1 = stateVarName.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.EnumStateVarConversion">
            <summary>
            Gets the code for converting a state var enum type from and to a string.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarFriendlyName, 1 = parseCaseStatements, 2 = toStringCaseStatements.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.EnumStateVar">
            <summary>
            Gets the definition for the property of an enum state variable.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarFriendlyName, 1 = stateVarName, 2 = state var description.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ActionInArgument">
            <summary>
            Gets the definition for an actions in parameter argument.
            </summary>
            <remarks>
            Format Parameters:
            0 = ArgumentType, 1 = ArgumentName, 2 = ", " if required.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ActionOutArgument">
            <summary>
            Gets the definition for an action out parameter argument.
            </summary>
            <remarks>
            Format Parameters:
            0 = ArgumentType, 1 = ArgumentName, 2 = ", " if required.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.InSetValue">
            <summary>
            Gets the definition for setting an actions in value.
            </summary>
            <remarks>
            Format Parameters:
            0 = InArgumentIndex, 1 = InArgumentName.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.InSetValueEnum">
            <summary>
            Gets the definition for setting an actions in enumerated value.
            </summary>
            <remarks>
            Format Parameters:
            0 = InArgumentIndex, 1 = StateVarEnumName, 2 = InArgumentName.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.OutSetValue">
            <summary>
            Gets the definition for setting an actions out value.
            </summary>
            <remarks>
            Format Parameters:
            0 = OutArgumentName, 1 = OutArgumentType, 2 = OutArgumentIndex.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.OutSetValueEnum">
            <summary>
            Gets the definition for setting an actions out enumerated value.
            </summary>
            <remarks>
            Format Parameters:
            0 = OutArgumentName, 1 = StateVarEnumName, 2 = OutArgumentIndex.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.OutReturnValue">
            <summary>
            Gets the definition for return an actions out value.
            </summary>
            <remarks>
            Format Parameters:
            0 = OutArgumentType, 1 = OutArgumentIndex.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.OutReturnValueEnum">
            <summary>
            Gets the definition for return an actions out enumerated value.
            </summary>
            <remarks>
            Format Parameters:
            0 = StateVarEnumName, 1 = OutArgumentIndex.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ActionReturnsComment">
            <summary>
            Gets the comment line used for an actions return value.
            </summary>
            <remarks>
            Format Parameters:
            0 = name, 1 = information.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ArgumentComment">
            <summary>
            Gets the action argument comment.
            </summary>
            <remarks>
            Format Parameters:
            0 = actionName, 1 = extra state var Comments.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.StateVarComment">
            <summary>
            Gets the state var comment.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarName, 1 = extra state var comments.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.StateVarAllowedRangeComment">
            <summary>
            Gets the state var allowed range comment.
            </summary>
            <remarks>
            Format Parameters:
            0 = minimum range, 1 = maximum range.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.StateVarStepComment">
            <summary>
            Gets the state var step comment.
            </summary>
            <remarks>
            Format Parameters:
            0 = increment step value.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.StateVarAllowedValues">
            <summary>
            Gets the state var allowed values comment.
            </summary>
            <remarks>
            Format Parameters:
            0 = state var allowed values list.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.StateVarDefaultValueComment">
            <summary>
            Gets the state var default value comment.
            </summary>
            <remarks>
            Format Parameters:
            0 = state var default value
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ArgMinimum">
            <summary>
            Gets the state var allowed range when no minimum comment.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ArgMaximum">
            <summary>
            Gets the state var allowed range when no maximum comment.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.AllowedValue">
            <summary>
            Gets the comment for an allowed values list.
            </summary>
            <remarks>
            Format Parameters:
            0 = comma with space if needed, 1 = allowedValueText.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ActionInParamComment">
            <summary>
            Gets the comment line used for an actions in parameter value.
            </summary>
            <remarks>Format Parameters: 0 = name, 1 = information.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ActionOutParamComment">
            <summary>
            Gets the comment line used for an actions out parameter value.
            </summary>
            <remarks>Format Parameters: 0 = name, 1 = information.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.OutVar">
            <summary>
            Gets the code for the out variables declaration in an action method.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.Action">
            <summary>
            Gets the definition for a multi out parameter action.
            </summary>
            <remarks>
            Format Parameters:
            0 = ActionFunctionName, 1 = InArguments, 2 = OutArguments
            3 = CountInArguments, 4 = InSetValues, 5 = ActionName,
            6 = OutSetValues, 7 = InOutArgumentsComma, 8 = return type,
            9 = in params comments, 10 = out params comments, 11 = returns comments,
            12 = out var or string.empty if not used
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ReturnAction">
            <summary>
            Gets the definition for a single out parameter action.
            </summary>
            <remarks>
            Format Parameters:
            0 = ActionFunctionName, 1 = InArguments, 2 = OutArguments (string.Empty)
            3 = CountInArguments, 4 = InSetValues, 5 = ActionName,
            6 = OutSetValues, 7 = InOutArgumentsComma, 8 = OutReturnType, 
            9 = in params comments, 10 = out params comments, 11 = returns comments.
            12 = out var or string.empty if not used
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.StateVarChangedEventHandlerCaseStatement">
            <summary>
            Gets the overrided state var redirection code - sends the event for actual state variable
            as well as the for the Object type variable.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarNameConstant, 1 = StateVarName, 2 = StateVarType, 3 = stateVarConvertedValue.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.StateVarChangedEventHandler">
            <summary>
            Gets the overrided state var changed event handler to pass through real state changed event handlers.
            </summary>
            <remarks>Format Parameters: 0 = case code for each state variable.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ServiceClassHeaderComment">
            <summary>
            Gets the code for the comments as the class header.
            </summary>
            <remarks>
            Format Parameters:
            0 = rootDeviceName, 1 = rootDeviceType, 2 = serialNumber
            3 = deviceName, 4 = deviceType,
            5 = serviceName, 6 = serviceType
            7 = dateTime, 8 = className,
            9 = namespaceName, 10 = classScope,
            11 = partialClass, 12 = testStateVars.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ICodeGenProvider.ServiceBase">
            <summary>
            Gets the definition for the entire service class.
            </summary>
            <remarks>
            Format Parameters:
            0 = namespace, 1 = classname, 2 = serviceType, 3 = enuemrations, 
            4 = "partial " if partial class, else string.empty, 5 = StateVarConversions,
            6 = ActionMethods, 7 = StateVarProps, 8 = stringConstants, 9 = classModifiers,
            10 = eventHandlers, 11 = eventCallers, 12 = classHeaderComment.
            </remarks>
        </member>
        <member name="M:ManagedUPnP.CodeGen.CSharpCodeGenProvider.GenerateRegion(System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Generates code for a region if content is available.
            </summary>
            <param name="regionName">The name of the region.</param>
            <param name="regionContent">The content of the region with one empty line at the end and none at the start.</param>
            <param name="addEmptyLineBeforeEnd">True to add empty line before region ending line.</param>
            <param name="addEmptyLineBeforeStart">True to add empty line before region start line.</param>
            <param name="indentation">The indentation (0 = non embedded class).</param>
            <returns>The string for the region.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.CSharpCodeGenProvider.CodeFriendlyIdentifier(System.String,System.Boolean)">
            <summary>
            Gets a code friendly identifier for a string.
            </summary>
            <param name="name">The string.</param>
            <param name="parameter">True if identifier is a parameter (ie. starts with lower case letter).</param>
            <returns>The code friendly identifier.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.CSharpCodeGenProvider.CodeFriendlyIdentifier(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a code friendly identifier for a string.
            </summary>
            <param name="name">The string.</param>
            <param name="parameter">True if identifier is a parameter (ie. starts with lower case letter).</param>
            <param name="allowUnderscores">True to allow underscores from the string.</param>
            <returns>The code friendly identifier.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.CSharpCodeGenProvider.GetClassScope(ManagedUPnP.CodeGen.ClassScope,System.String)">
            <summary>
            Gets the class scope for a ClassScope enumeration.
            </summary>
            <param name="classScope">The class scope enumeration.</param>
            <param name="addAfter">The string to add after the scope if it is available.</param>
            <returns>The class scope as a string.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ArraySizeForCount(System.Int32)">
            <summary>
            Gets the array initialiser size for a specific count.
            </summary>
            <param name="inArgumentCount">The number of elements to be in the array.</param>
            <returns>A string defining the number of elements in the array.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ToString">
            <summary>
            Converts the code provider to a string.
            </summary>
            <returns>The code provider name as a string.</returns>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.PartialClassFileExtension">
            <summary>
            Gets the full file extension for a partial class.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ClassFileExtension">
            <summary>
            Gets the full file extension for class.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ConstantIdentifyer">
            <summary>Gets the code for the constant name.</summary>
            <remarks>Format Parameters: 0 = typeName, 1 = valueName.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ConstantGroupDefinition">
            <summary>Gets the code for the constant group definition.</summary>
            <remarks>Format Parameters: 0 = type, 1 = constantDefinitions.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ConstantComment">
            <summary>Gets the code for the constant comment.</summary>
            <remarks>Format Parameters: 0 = commentText.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ConstantDefinition">
            <summary>Gets the code for the constant definition.</summary>
            <remarks>Format Parameters: 0 = VarName, 1 = value, 2 = comments</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.StateVarNameGroup">
            <summary>
            Gets the group name for state variable constant identifiers.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.AllowedValueGroup">
            <summary>
            Gets the group name for state variable allowed value constant identifiers.
            </summary>
            <remarks>Format Parameters: 0 = StateVarFriendlyName.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ActionNameGroup">
            <summary>
            Gets the group name for action constant identifiers.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ServiceGroup">
            <summary>
            Gets the group name for service constant identifiers.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.DeviceGroup">
            <summary>
            Gets the group name for device constant identifiers.
            </summary>
            <remarks>Format Parameters: 0 = StateVarFriendlyName</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ProtectedConstants">
            <summary>
            Gets the protected constants region name.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.PublicProperties">
            <summary>
            Gets the public properties region name.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ProtectedMethods">
            <summary>
            Gets the protected methods region name.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.PublicEnumerations">
            <summary>
            Gets the public enumerations region name.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.EventHandlers">
            <summary>
            Gets the event handlers region name.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.EventCallers">
            <summary>
            Gets the event callers region name.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.Region">
            <summary>
            Gets the code for a region.
            </summary>
            <remarks>Format Parameters: 0 = regionName, 1 = regionCode, 2 = indentation, 3 = beforeEnd, 4 = beforeStart.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.Null">
            <summary>
            Gets the Null value for an object.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.PartialClass">
            <summary>
            Gets the partial class statement.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.Public">
            <summary>
            Gets the public modifier statement.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.Service">
            <summary>
            Gets the name of the service class.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.Device">
            <summary>
            Gets the name of the device class.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ServiceID">
            <summary>
            Gets the string to append to the string constant names for service IDs.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.DeviceType">
            <summary>
            Gets the string to append to the string constant names for device Types.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.DeviceModelName">
            <summary>
            Gets the string to append to the string constant names for device model names.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.IndentChar">
            <summary>
            Gets the indent char to use for indentation of code.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.EmptyLine">
            <summary>
            Gets the string representing and empty line.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.Space">
            <summary>
            Gets a space.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.UnknownType">
            <summary>
            Gets the type for a parameter when it cannot be determined.
            </summary>
            <remarks>This can occur if a related state variable definition is missing.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ParameterSeperator">
            <summary>
            Gets the a comma for delimiting parameters.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.Comma">
            <summary>
            Gets the a comma with a trailing space.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.UsingClause">
            <summary>
            Gets the definition for a using clause.
            </summary>
            <remarks>
            Format Parameters:
            0 = Using namespace.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ServiceIdConstComment">
            <summary>
            Gets the definition for the service ID constant comment.
            </summary>
            <remarks>Format Parameters: 0 = service friendly name.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.DeviceTypeConstComment">
            <summary>
            Gets the definition for the device type constant comment.
            </summary>
            <remarks>Format Parameters: 0 = device friendly name.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.GenericDeviceRet">
            <summary>
            Gets the definition for the generic device return value.
            </summary>
            <remarks>
            Format Parameters:
            0 = DeviceClass, 1 = DeviceType.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.GenericServiceRet">
            <summary>
            Gets the definition for the generic service return value.
            </summary>
            <remarks>
            Format Parameters:
            0 = ServiceClass, 1 = ServiceId.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.SpecificDeviceRet">
            <summary>
            Gets the definition for the specific device return value.
            </summary>
            <remarks>
            Format Parameters:
            0 = DeviceClass, 1 = DeviceType.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.SpecificServiceRet">
            <summary>
            Gets the definition for the specific service return value.
            </summary>
            <remarks>
            Format Parameters:
            0 = ServiceClass, 0 = ServiceId.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.Property">
            <summary>
            Gets the definition for a public property.
            </summary>
            <remarks>
            Format Parameters:
            0 = returnType, 1 = propStartName, 2 = propEndName,
            3 = returnValue, 4 = Device/Service name, 5 = Device/Service type, 6 = "Device" / "Service"
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.DeviceClassHeaderComment">
            <summary>
            Gets the code for the comments as the class header.
            </summary>
            <remarks>
            Format Parameters:
            0 = rootDeviceName, 1 = rootDeviceType, 2 = serialNumber
            3 = deviceName, 4 = deviceType,
            5 = dateTime, 6 = className,
            7 = namespaceName, 8 = classScope,
            9 = partialClass.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.DeviceBase">
            <summary>
            Gets the definition for the entire device class.
            </summary>
            <remarks>
            Format Parameters:
            0 = using, 1 = namespace, 2 = classScope, 3 = "partial " if partial class, 
            4 = className, 5 = protectedConstants, 6 = DeviceType, 7 = proprties,
            8 = DeviceModelName, 9 = classHeaderComment
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.AllowedValueComment">
            <summary>
            Gets the comment for the allowed value constants.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.StateVarNameComment">
            <summary>
            Gets the comment for the state var name constants.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ActionNameComment">
            <summary>
            Gets the comment for the action name constants.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.EnumStateVarName">
            <summary>
            Gets the name for an enum state var type.
            </summary>
            <remarks>Format Parameters: 0 = StateVarFriendlyName.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.StateVarEnum">
            <summary>
            Gets the definition for an enum state var type.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarName, 1 = stateVarValues.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.EnumStateVarEventConversion">
            <summary>
            Gets the code used to convert non enum state var value to typed value.
            </summary>
            <remarks>Format Parameters: 0 = stateVarFriendlyName</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.EnumStateVarValue">
            <summary>
            Gets an enumeration value for an enum state variable.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarEnumValue, 1 = stateVarName
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.NonEnumStateVar">
            <summary>
            Gets the definition for the property of a non enum state variable.
            </summary>
            <remarks>
            Format Parameters:
            0 = returnType, 1 = stateVarFriendlyName, 2 = stateVarName, 3 = state var comment
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.NonEnumStateVarEventConversion">
            <summary>
            Gets the code used to convert non enum state var value to typed value.
            </summary>
            <remarks>Format Parameters: 0 = stateVarType</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.EnumParseCaseStatement">
            <summary>
            Gets the parsing case statement for an enum type.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarValue, 1 = stateVarName, 2 = stateVarEnumValue.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.EnumToStringCaseStatement">
            <summary>
            Gets the to string case statement for an enum type.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarName, 1 = stateVarEnumValue, 2 = stateVarValue.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.StateVariableEventHandler">
            <summary>
            Gets the event handler definition for state variable changes.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarType, 1 = stateVarName.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.StateVariableEventCaller">
            <summary>
            Gets the event caller definition for state variable changes.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarType, 1 = stateVarName.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.EnumStateVarConversion">
            <summary>
            Gets the code for converting a state var enum type from and to a string.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarFriendlyName, 1 = parseCaseStatements, 2 = toStringCaseStatements.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.EnumStateVar">
            <summary>
            Gets the definition for the property of an enum state variable.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarFriendlyName, 1 = stateVarName, 2 = state var description.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ActionInArgument">
            <summary>
            Gets the definition for an actions in parameter argument.
            </summary>
            <remarks>
            Format Parameters:
            0 = ArgumentType, 1 = ArgumentName, 2 = ", " if required.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ActionOutArgument">
            <summary>
            Gets the definition for an action out parameter argument.
            </summary>
            <remarks>
            Format Parameters:
            0 = ArgumentType, 1 = ArgumentName, 2 = ", " if required.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.InSetValue">
            <summary>
            Gets the definition for setting an actions in value.
            </summary>
            <remarks>
            Format Parameters:
            0 = InArgumentIndex, 1 = InArgumentName.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.InSetValueEnum">
            <summary>
            Gets the definition for setting an actions in enumerated value.
            </summary>
            <remarks>
            Format Parameters:
            0 = InArgumentIndex, 1 = StateVarEnumName, 2 = InArgumentName.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.OutSetValue">
            <summary>
            Gets the definition for setting an actions out value.
            </summary>
            <remarks>
            Format Parameters:
            0 = OutArgumentName, 1 = OutArgumentType, 2 = OutArgumentIndex.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.OutSetValueEnum">
            <summary>
            Gets the definition for setting an actions out enumerated value.
            </summary>
            <remarks>
            Format Parameters:
            0 = OutArgumentName, 1 = StateVarEnumName, 2 = OutArgumentIndex.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.OutReturnValue">
            <summary>
            Gets the definition for return an actions out value.
            </summary>
            <remarks>
            Format Parameters:
            0 = OutArgumentType, 1 = OutArgumentIndex.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.OutReturnValueEnum">
            <summary>
            Gets the definition for return an actions out enumerated value.
            </summary>
            <remarks>
            Format Parameters:
            0 = StateVarEnumName, 1 = OutArgumentIndex.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ActionReturnsComment">
            <summary>
            Gets the comment line used for an actions return value.
            </summary>
            <remarks>
            Format Parameters:
            0 = name, 1 = information.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ArgumentComment">
            <summary>
            Gets the action argument comment.
            </summary>
            <remarks>
            Format Parameters:
            0 = actionName, 1 = extra state var Comments.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.StateVarComment">
            <summary>
            Gets the state var comment.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarName, 1 = extra state var comments.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.StateVarAllowedRangeComment">
            <summary>
            Gets the state var allowed range comment.
            </summary>
            <remarks>
            Format Parameters:
            0 = minimum range, 1 = maximum range.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.StateVarStepComment">
            <summary>
            Gets the state var step comment.
            </summary>
            <remarks>
            Format Parameters:
            0 = increment step value.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.StateVarAllowedValues">
            <summary>
            Gets the state var allowed values comment.
            </summary>
            <remarks>
            Format Parameters:
            0 = state var allowed values list.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.StateVarDefaultValueComment">
            <summary>
            Gets the state var default value comment.
            </summary>
            <remarks>
            Format Parameters:
            0 = state var default value
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ArgMinimum">
            <summary>
            Gets the state var allowed range when no minimum comment.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ArgMaximum">
            <summary>
            Gets the state var allowed range when no maximum comment.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.AllowedValue">
            <summary>
            Gets the comment for an allowed values list.
            </summary>
            <remarks>
            Format Parameters:
            0 = comma with space if needed, 1 = allowedValueText.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ActionInParamComment">
            <summary>
            Gets the comment line used for an actions in parameter value.
            </summary>
            <remarks>Format Parameters: 0 = name, 1 = information.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ActionOutParamComment">
            <summary>
            Gets the comment line used for an actions out parameter value.
            </summary>
            <remarks>Format Parameters: 0 = name, 1 = information.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.OutVar">
            <summary>
            Gets the code for the out variables declaration in an action method.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.Action">
            <summary>
            Gets the definition for a multi out parameter action.
            </summary>
            <remarks>
            Format Parameters:
            0 = ActionFunctionName, 1 = InArguments, 2 = OutArguments
            3 = CountInArguments, 4 = InSetValues, 5 = ActionName,
            6 = OutSetValues, 7 = InOutArgumentsComma, 8 = return type,
            9 = in params comments, 10 = out params comments, 11 = returns comments,
            12 = out var or string.empty if not used
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ReturnAction">
            <summary>
            Gets the definition for a single out parameter action.
            </summary>
            <remarks>
            Format Parameters:
            0 = ActionFunctionName, 1 = InArguments, 2 = OutArguments (string.Empty)
            3 = CountInArguments, 4 = InSetValues, 5 = ActionName,
            6 = OutSetValues, 7 = InOutArgumentsComma, 8 = OutReturnType, 
            9 = in params comments, 10 = out params comments, 11 = returns comments.
            12 = out var or string.empty if not used
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.StateVarChangedEventHandlerCaseStatement">
            <summary>
            Gets the overrided state var redirection code - sends the event for actual state variable
            as well as the for the Object type variable.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarNameConstant, 1 = StateVarName, 2 = StateVarType, 3 = stateVarConvertedValue.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.StateVarChangedEventHandler">
            <summary>
            Gets the overrided state var changed event handler to pass through real state changed event handlers.
            </summary>
            <remarks>Format Parameters: 0 = case code for each state variable.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ServiceClassHeaderComment">
            <summary>
            Gets the code for the comments as the class header.
            </summary>
            <remarks>
            Format Parameters:
            0 = rootDeviceName, 1 = rootDeviceType, 2 = serialNumber
            3 = deviceName, 4 = deviceType,
            5 = serviceName, 6 = serviceType
            7 = dateTime, 8 = className,
            9 = namespaceName, 10 = classScope,
            11 = partialClass, 12 = testStateVars.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.CSharpCodeGenProvider.ServiceBase">
            <summary>
            Gets the definition for the entire service class.
            </summary>
            <remarks>
            Format Parameters:
            0 = namespace, 1 = classname, 2 = serviceType, 3 = enuemrations, 
            4 = "partial " if partial class, else string.empty, 5 = StateVarConversions,
            6 = ActionMethods, 7 = StateVarProps, 8 = stringConstants, 9 = classModifiers,
            10 = eventHandlers, 11 = eventCallers, 12 = classHeaderComment.
            </remarks>
        </member>
        <member name="T:ManagedUPnP.Descriptions.StateVariablesDescription">
            <summary>
            Encapsulates the description for a state variables list.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.FormattedDescriptionDictionary`2">
            <summary>
            Encapsulates a description dictionary with built in ToString formatting.
            </summary>
            <typeparam name="TKey">The type for the key.</typeparam>
            <typeparam name="TValue">The type for the value.</typeparam>
        </member>
        <member name="T:ManagedUPnP.Descriptions.DescriptionDictionary`2">
            <summary>
            Encapsulates a description dictionary using a key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:ManagedUPnP.Descriptions.DescriptionDictionary`2.mdDictionary">
            <summary>
            The dictionary for the keys and descriptions.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DescriptionDictionary`2.#ctor(ManagedUPnP.Descriptions.Description)">
            <summary>
            Creates a new description dictionary.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DescriptionDictionary`2.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates a new description dictionary from a reader.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The XML reader.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DescriptionDictionary`2.AddItemsFrom(System.Xml.XmlTextReader)">
            <summary>
            Adds the items from an XML reader.
            </summary>
            <param name="reader">The XML reader to read the items from.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DescriptionDictionary`2.ContainsKey(`0)">
            <summary>
            Returns true if the disctionary contains a key.
            </summary>
            <param name="key">The key to determine existence of.</param>
            <returns>True if the key exists, false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DescriptionDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">
            When this method returns, contains the value associated with the specified
            key, if the key is found; otherwise, the default value for the type of the
            value parameter. This parameter is passed uninitialized.
            </param>
            <returns>True if the value was set.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DescriptionDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Returns true if a key value pair exists.
            </summary>
            <param name="item">The item to test for existence.</param>
            <returns>True if the key value pair exists.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DescriptionDictionary`2.GetEnumerator">
            <summary>
            Gets the key value pair enumerator.
            </summary>
            <returns>The enumerator for the key value pair.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DescriptionDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the key value pair enumerator.
            </summary>
            <returns>The enumerator for the key value pair.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DescriptionDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the key value pairs to an array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The array index to start copying to.</param>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DescriptionDictionary`2.Count">
            <summary>
            Gets the number of items in the dictionary.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DescriptionDictionary`2.Keys">
            <summary>
            Gets the keys in the dictionary.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DescriptionDictionary`2.Values">
            <summary>
            Gets the values in the dictionary.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DescriptionDictionary`2.Item(`0)">
            <summary>
            Gets the value for a dictionary key.
            </summary>
            <param name="key">The key to get the value for.</param>
            <returns>The value for the key.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DescriptionDictionary`2.Item(System.Int32)">
            <summary>
            Gets the value for an index.
            </summary>
            <param name="index">The index to get the value for.</param>
            <returns>The value for the index.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.FormattedDescriptionDictionary`2.#ctor(ManagedUPnP.Descriptions.Description)">
            <summary>
            Creates a new formatted description dictionary.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.FormattedDescriptionDictionary`2.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates a new formatted description dictionary from a reader.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The XML reader.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.FormattedDescriptionDictionary`2.ToString(System.Int32)">
            <summary>
            Converts the description to a string.
            </summary>
            <param name="indent">The indent for the string.</param>
            <returns>The string representation for the description.</returns>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariablesDescription.msElement">
            <summary>
            The element description for the state variables.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariablesDescription.IsEndNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariablesDescription.IsStartNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariablesDescription.#ctor(ManagedUPnP.Descriptions.Description)">
            <summary>
            Creates a new state variable list description.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariablesDescription.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates a new state variable list description.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The XML reader to get the state variable list from.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariablesDescription.UseNode(System.Xml.XmlTextReader,System.String)">
            <summary>
            Uses an XML node for this description.
            </summary>
            <param name="reader">The XML reader to use the node from.</param>
            <param name="lastNodeName">The last node name.</param>
            <returns>True if the node was processed false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariablesDescription.IsEndNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariablesDescription.IsStartNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="T:ManagedUPnP.Descriptions.ArgumentDescription">
            <summary>
            Encapsulates the description for an action argument.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.ArgumentDescription.msElement">
            <summary>
            Gets the element name for the argument description.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ArgumentDescription.IsStartNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ArgumentDescription.IsEndNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ArgumentDescription.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates the description for an argument description.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The XML reader to load the argument description.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ArgumentDescription.IsEndNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ArgumentDescription.IsStartNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ArgumentDescription.ToString(System.Int32)">
            <summary>
            Converts the description to a string.
            </summary>
            <param name="indent">The indent for the string.</param>
            <returns>The string representation for the description.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.ArgumentDescription.Name">
            <summary>
            Gets the name for the argument.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.ArgumentDescription.Direction">
            <summary>
            Gets the communication direction for the argument.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.ArgumentDescription.DirectionValue">
            <summary>
            Gets the direction of the argument as an enumeration.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.ArgumentDescription.RelatedStateVariable">
            <summary>
            Gets the related state variable for the argument.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.ArgumentDescription.RelatedStateVariableDescription">
            <summary>
            Gets the state variable description which relates to this argument.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.ActionsDescription">
            <summary>
            Encapsulates a description for a list of actions.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.ActionsDescription.msElement">
            <summary>
            Gets the element name for the action list.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ActionsDescription.IsEndNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ActionsDescription.IsStartNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ActionsDescription.#ctor(ManagedUPnP.Descriptions.Description)">
            <summary>
            Creates the actions list description.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ActionsDescription.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates a new actions list description from the reader.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The XML reader to get the actions descripton from</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ActionsDescription.UseNode(System.Xml.XmlTextReader,System.String)">
            <summary>
            Uses an XML node for this description.
            </summary>
            <param name="reader">The XML reader to use the node from.</param>
            <param name="lastNodeName">The last node name.</param>
            <returns>True if the node was processed false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ActionsDescription.IsEndNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ActionsDescription.IsStartNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="T:ManagedUPnP.Descriptions.IUPnPServiceExtensions">
            <summary>
            Extends the IUPnPService extensions.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.IUPnPServiceExtensions.Description(UPNPLib.IUPnPService,UPNPLib.IUPnPDevice,ManagedUPnP.Descriptions.RootDescription)">
            <summary>
            Gets the description for a service.
            </summary>
            <param name="service">The native com service.</param>
            <param name="device">The native com device.</param>
            <param name="rootDescription">The root description for the services device.</param>
            <returns>The service description.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.IUPnPServiceExtensions.DeviceServiceDescription(UPNPLib.IUPnPService,UPNPLib.IUPnPDevice,ManagedUPnP.Descriptions.RootDescription)">
            <summary>
            Gets the device service description for a service.
            </summary>
            <param name="service">The service to get the description for.</param>
            <param name="device">The device to get the description for.</param>
            <param name="rootDescription">The root description for the device.</param>
            <returns>The device service description.</returns>
        </member>
        <member name="T:ManagedUPnP.USENGConverter">
            <summary>
            Encapsulates a converter to and from US ENG strings.
            </summary>
        </member>
        <member name="F:ManagedUPnP.USENGConverter.mcUSENGCulture">
            <summary>
            The culture to use for conversion (US ENG).
            </summary>
        </member>
        <member name="F:ManagedUPnP.USENGConverter.mdConverters">
            <summary>
            The dictionary of types and their converters.
            </summary>
        </member>
        <member name="M:ManagedUPnP.USENGConverter.GetConverter(System.Type)">
            <summary>
            Gets the converter for a managed type.
            </summary>
            <param name="dataType">The managed type to get the converter for.</param>
            <returns>The type converter for the type.</returns>
        </member>
        <member name="M:ManagedUPnP.USENGConverter.ToString(System.Type,System.Object)">
            <summary>
            Converts an object to a US ENG string.
            </summary>
            <param name="dataType">The managed type for the object.</param>
            <param name="value">The value for the object to convert.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:ManagedUPnP.USENGConverter.FromString(System.Type,System.String)">
            <summary>
            Converts an US ENG string to an object.
            </summary>
            <param name="dataType">The managed type for the object.</param>
            <param name="value">The string value to convert.</param>
            <returns>An object of type Type.</returns>
        </member>
        <member name="T:ManagedUPnP.IUPnPDeviceExtensions">
            <summary>
            Extends the IUPnPDevice interface.
            </summary>
        </member>
        <member name="M:ManagedUPnP.IUPnPDeviceExtensions.ReadableInfo(UPNPLib.IUPnPDevice,System.Int32)">
            <summary>
            Gets all readable info as text for a device.
            </summary>
            <param name="device">The com device to get the info for.</param>
            <param name="indent">The indent for the information.</param>
            <returns>The readable info for the device.</returns>
        </member>
        <member name="M:ManagedUPnP.IUPnPDeviceExtensions.GetDocumentURL(UPNPLib.IUPnPDevice)">
            <summary>
            Gets the document URL for a native com device.
            </summary>
            <param name="device">The native com device to get the document URL for.</param>
            <returns>The URL for the document.</returns>
        </member>
        <member name="M:ManagedUPnP.IUPnPDeviceExtensions.FindServices(UPNPLib.IUPnPDevice,System.Guid,System.String)">
            <summary>
            Finds services for a device.
            </summary>
            <param name="device">The device to get the services for.</param>
            <param name="interfaceGuid">The network guid for any new devices if available.</param>
            <param name="serviceType">The service type for the services to search for.</param>
            <returns>The services found.</returns>
        </member>
        <member name="T:ManagedUPnP.SearchCompleteEventArgs">
            <summary>
            Event arguments for when a searches initial search is compelte.
            </summary>
        </member>
        <member name="T:ManagedUPnP.NamespaceDoc">
            <summary>
            The ManagedUPnP namespace contains classes for
            interfacing with Microsofts COM UPnP implementation,
            as well as code generation, and XML description 
            file processing.
            </summary>
        </member>
        <member name="T:ManagedUPnP.StateVariableChangedEventArgs`1">
            <summary>
            Encapsulates the event arguments for when an evented state variable.
            </summary>
            <typeparam name="T">The data type for the state variable.</typeparam>
        </member>
        <member name="F:ManagedUPnP.StateVariableChangedEventArgs`1.msStateVarName">
            <summary>
            The state variable name which changed.
            </summary>
        </member>
        <member name="F:ManagedUPnP.StateVariableChangedEventArgs`1.mtStateVarValue">
            <summary>
            The new state variable value.
            </summary>
        </member>
        <member name="M:ManagedUPnP.StateVariableChangedEventArgs`1.#ctor(System.String,`0)">
            <summary>
            Creates a new state variable changed event arguments.
            </summary>
            <param name="stateVarName">The state variable name.</param>
            <param name="stateVarValue">The state variable value.</param>
        </member>
        <member name="P:ManagedUPnP.StateVariableChangedEventArgs`1.StateVarName">
            <summary>
            Gets the state variable name which changed.
            </summary>
        </member>
        <member name="P:ManagedUPnP.StateVariableChangedEventArgs`1.StateVarValue">
            <summary>
            Gets the new state variable value.
            </summary>
        </member>
        <member name="T:ManagedUPnP.SearchCompleteEventHandler">
            <summary>
            Event handler for when an initial search is complete.
            </summary>
            <param name="sender">The sender of the events.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ManagedUPnP.Device">
            <summary>
            Encapsulates a UPnP Device.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Device.mdCOMDevice">
            <summary>
            Hold the handle to the Native COM Device
            </summary>
        </member>
        <member name="F:ManagedUPnP.Device.mgInterfaceGuid">
            <summary>
            Contains the Guid for the Network interface this device is on.
            </summary>
            <remarks>Only valid if mbInterfaceGuidAvailable is true.</remarks>
        </member>
        <member name="F:ManagedUPnP.Device.mbInterfaceGuidAvailable">
            <summary>
            True if mgInterfaceGuid is set.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Device.#ctor(UPNPLib.IUPnPDevice,System.Guid)">
            <summary>
            Creates a new device.
            </summary>
            <param name="comDevice">The Native COM Device for which this device is linked to.</param>
            <param name="interfaceGuid">The Network interface Guid ID for the device or Guid.Empty for unknown.</param>
        </member>
        <member name="M:ManagedUPnP.Device.#ctor(ManagedUPnP.Device)">
            <summary>
            Creates a new device from an already created device.
            </summary>
            <param name="device">The device to create from.</param>
        </member>
        <member name="M:ManagedUPnP.Device.DevicesByType(System.String,System.Boolean)">
            <summary>
            Gets the devices by Type for this list.
            </summary>
            <param name="type">The Type for the devices to get.</param>
            <param name="recursive">True to search recursively.</param>
            <returns>The Devices that matched the type.</returns>
        </member>
        <member name="M:ManagedUPnP.Device.DevicesByModelName(System.String,System.Boolean)">
            <summary>
            Gets the devices by ModelName for this list.
            </summary>
            <param name="modelName">The ModelName for the devices to get.</param>
            <param name="recursive">True to search recursively.</param>
            <returns>The Devices that matched the type.</returns>
        </member>
        <member name="M:ManagedUPnP.Device.FirstDeviceByType(System.String,System.Boolean)">
            <summary>
            Gets the first device by Type for this list.
            </summary>
            <param name="type">The Type for the device to get.</param>
            <param name="recursive">True to search recursively.</param>
            <returns>The Devices that matched the type.</returns>
        </member>
        <member name="M:ManagedUPnP.Device.FirstDeviceByModelName(System.String,System.Boolean)">
            <summary>
            Gets the first device by ModelName for this list.
            </summary>
            <param name="modelName">The ModelName for the devices to get.</param>
            <param name="recursive">True to search recursively.</param>
            <returns>The Devices that matched the type.</returns>
        </member>
        <member name="M:ManagedUPnP.Device.ToString">
            <summary>
            Gets all relevant information for this device in a string format.
            </summary>
            <returns>A String.</returns>
        </member>
        <member name="M:ManagedUPnP.Device.GetIconURL(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the URL for an icon for this device.
            </summary>
            <param name="encodingFormat">The MIME type of the encoding format that is requested for the icon.</param>
            <param name="sizeX">Specifies the width of the icon, in pixels. Standard values are 16, 32, or 48.</param>
            <param name="sizeY">Specifies the height of the icon, in pixels. Standard values are 16, 32, or 48 pixels.</param>
            <param name="bitDepth">Specifies the bit depth of the icon. Standard values are 8, 16, or 24.</param>
            <returns>A string representing the URL for the icon.</returns>
            <remarks>
            An application can specify any values for lSizeX, lSizeY, and lBitDepth. However, there is no 
            guarantee that an icon exists with those specifications. If a matching icon does not exist, 
            the URL for the icon that most closely matches the size and bit depth specified is returned.
            </remarks>
        </member>
        <member name="M:ManagedUPnP.Device.GetIconImage(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the image for an icon from the device if its available.
            </summary>
            <param name="encodingFormat">The mime encoding format eg. "image/jpeg".</param>
            <param name="sizeX">The requested width of the icon.</param>
            <param name="sizeY">The requested height of the icon.</param>
            <param name="bitDepth">The requested bit depth of the icon.</param>
            <returns>An image if found or null if not.</returns>
        </member>
        <member name="P:ManagedUPnP.Device.COMDevice">
            <summary>
            Gets the Native COM Device interface for this device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.RootHostName">
            <summary>
            Gets the host name for the device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.RootHostAddresses">
            <summary>
            Gets the Host IP addresses for the device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.Adapters">
            <summary>
            Gets all network interfaces which this device is connectable from.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.AdapterUnicastIPAddressInformations">
            <summary>
            Returns an array of Unicast IP addresses identifying the Host adapters
            which can connect to this device.
            </summary>
            <returns>An array IP Addresses.</returns>
        </member>
        <member name="P:ManagedUPnP.Device.AdapterIPAddresses">
            <summary>
            Returns an array of IP addresses identifying the Host adapters
            which can connect to this device.
            </summary>
            <returns>An array IP Addresses.</returns>
        </member>
        <member name="P:ManagedUPnP.Device.InterfaceGuid">
            <summary>
            Gets the network interface Guid for this device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.InterfaceGuidAvailable">
            <summary>
            Gets whether the InterfaceGuid property is set and is valid.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.Children">
            <summary>
            Gets the immediate child devices for this device. 
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.Description">
            <summary>
            Gets the description for this device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.FriendlyName">
            <summary>
            Gets the friendly name for this device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.HasChildren">
            <summary>
            Gets whether this device has children.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.IsRootDevice">
            <summary>
            Gets whether this device is the root device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.ManufacturerName">
            <summary>
            Gets the manufacturer name for this device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.DocumentURL">
            <summary>
            Gets the document URL for the Device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.ManufacturerURL">
            <summary>
            Gets the manufacturer URL for this device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.ModelName">
            <summary>
            Gets the model name for this device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.ModelNumber">
            <summary>
            Gets the model number for this device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.ModelURL">
            <summary>
            Gets the model URL for this device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.ParentDevice">
            <summary>
            Gets the parent device for this device or null if this is the top parent device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.PresentationURL">
            <summary>
            Gets the URL used to access the devices interface in a browser.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.RootDevice">
            <summary>
            Gets the root device for this device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.SerialNumber">
            <summary>
            Gets the serial number for this device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.Services">
            <summary>
            Gets the immediate services this device provides.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.Type">
            <summary>
            Gets the type of this device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.UniqueDeviceName">
            <summary>
            Gets the UDN of this device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.UniversalProductCode">
            <summary>
            Gets the UPC of this device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Device.Item(System.String)">
            <summary>
            Gets the device by UDN for this device and its children recusively.
            </summary>
            <param name="udn">The UDN for the device to get.</param>
            <returns>The Device if UDN is found or null if not.</returns>
        </member>
        <member name="T:ManagedUPnP.Descriptions.StateVariableDataTypeInfoAttribute">
            <summary>
            Provides information for a data type field.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataTypeInfoAttribute.msDescription">
            <summary>
            The description for the data type.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataTypeInfoAttribute.msName">
            <summary>
            The XML UPnP name for the data type.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataTypeInfoAttribute.mtBaseType">
            <summary>
            The managed base type for the data type.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataTypeInfoAttribute.mbEmptyAllowed">
            <summary>
            True if the value can be null.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDataTypeInfoAttribute.#ctor(System.String,System.String,System.Type,System.Boolean)">
            <summary>
            Creates a new data type info attribute.
            </summary>
            <param name="description">The description for the data type.</param>
            <param name="name">The name for the data type.</param>
            <param name="baseType">The base managed type for the data type.</param>
            <param name="emptyAllowed">True if value can be empty (ie, empty string for string types).</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDataTypeInfoAttribute.ConvertStringToArray(System.String,System.Type)">
            <summary>
            Converts a string of comma separated elements to an array value.
            </summary>
            <param name="values">The string of comma separated elements to convert.</param>
            <param name="arrayType">The array type to convert to.</param>
            <returns>A new object of type arrayType (empty array if no elements).</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDataTypeInfoAttribute.ConvertArrayToString(System.Object)">
            <summary>
            Converts an array value to a string of comma separated elements.
            </summary>
            <param name="value">The array value to convert.</param>
            <returns>A comma separated list of elements.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDataTypeInfoAttribute.ConvertFromString(System.String)">
            <summary>
            Converts a string to a data value of this type.
            </summary>
            <param name="value">The string value to convert.</param>
            <returns>The converted value or null on failure.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDataTypeInfoAttribute.ConvertToString(System.Object)">
            <summary>
            Converts a data type value of this type to a string.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The string representation of the value or null if value is null.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.StateVariableDataTypeInfoAttribute.Description">
            <summary>
            Gets the description of the data type.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.StateVariableDataTypeInfoAttribute.Name">
            <summary>
            Gets the name of the data type.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.StateVariableDataTypeInfoAttribute.EmptyAllowed">
            <summary>
            Gets whether this data type can be empty (ie, empty string for string types).
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.StateVariableDataTypeInfoAttribute.BaseType">
            <summary>
            Gets the managed base type of the data type.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.StateVariableDataTypeInfoAttribute.Default">
            <summary>
            Gets the default managed value for the data type.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Components.UPnPDiscovery">
            <summary>
            Encapsulates a GUI thread safe discovery component, for discovering Devices and/or
            Services by Device.Type, Device.UDN or Service.ServiceTypeIdentifier.
            </summary>
            <example>
                <code>
                    UPnPDiscovery ldDiscovery = new UPnPDiscovery();
                    
                    ldDiscovery.SearchURI = "";
                    ldDiscovery.DeviceAdded += new ManagedUPnP.DeviceAddedEventHandler(UPnP_DeviceAdded);
                    ldDiscovery.ServiceAdded += new ManagedUPnP.ServiceAddedEventHandler(UPnP_ServiceAdded);
                    ldDiscovery.SearchComplete += new ManagedUPnP.SearchCompleteEventHandler(UPnP_SearchComplete);
                    ldDiscovery.SearchStarted += new System.EventHandler(UPnP_SearchStarted);
                    ldDiscovery.SearchFailed += new System.EventHandler(UPnP_SearchFailed);
                    ldDiscovery.SearchEnded += new System.EventHandler(UPnP_SearchEnded);
                    
                    ldDiscovery.Active = true;
                </code>
            </example>
        </member>
        <member name="F:ManagedUPnP.Components.UPnPDiscovery.msdefSearchUri">
            <summary>
            Default value for SearchURI property.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.UPnPDiscovery.mdfodefDeviceFindOption">
            <summary>
            Default value for DeviceFindOption property.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.UPnPDiscovery.msfodefServiceFindOption">
            <summary>
            Default value for ServiceFindOption property.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.UPnPDiscovery.mbdefResolveNetworkInterface">
            <summary>
            Default value for ResolveNetworkInterface property.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.UPnPDiscovery.mbdefActive">
            <summary>
            Default value for active property.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.UPnPDiscovery.maffdefAddressFamilyFlags">
            <summary>
            Defaults value for AddressFamilyFlagsProperty.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.UPnPDiscovery.msSearchUri">
            <summary>
            The Search URI to filter devices by. 
            A search uri can be a Device.Type, Device.UDN, or Service.ServiceTypeIdentifier in the form
            of urn:schemas-upnp-org:type:ver, uuid:00000000-0000-0000-0000-000000000000, or
            urn:schemas-upnp-org:service:type:ver. If Service.ServiceTypeIdentifier is used, all devices which 
            have a direct service of that type will be returned. 
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.UPnPDiscovery.mdfoDeviceFindOption">
            <summary>
            Determines which devices the DeviceAdded event handler should be raised for.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.UPnPDiscovery.msfoServiceFindOption">
            <summary>
            Determines which services the ServiceAdded event handler should be raised for.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.UPnPDiscovery.mbResolveNetworkInterface">
            <summary>
            Determines whether to resolve network interfaces of devices.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.UPnPDiscovery.maffAddressFamilyFlags">
            <summary>
            Determines which type of network protocols search for devices on. 
            This fill is only effective on Windows Vista and above.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.UPnPDiscovery.mdDiscovery">
            <summary>
            The current discovery object running, or null if none running.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.UPnPDiscovery.mbActive">
            <summary>
            The current active status, before or after initialisation.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.UPnPDiscovery.miInitialised">
            <summary>
            The initialisation level, 0 = initialised.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPDiscovery.#ctor">
            <summary>
            Creates a new UPnPDiscovery component.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPDiscovery.System#ComponentModel#ISupportInitialize#BeginInit">
            <summary>
            Occurs when the component begins its initialization.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPDiscovery.System#ComponentModel#ISupportInitialize#EndInit">
            <summary>
            Occurs when the component ends its initialization.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPDiscovery.OnDeviceAdded(ManagedUPnP.DeviceAddedEventArgs)">
            <summary>
            Raises the DeviceAdded event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPDiscovery.OnServiceAdded(ManagedUPnP.ServiceAddedEventArgs)">
            <summary>
            Raises the DeviceAdded event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPDiscovery.OnDeviceRemoved(ManagedUPnP.DeviceRemovedEventArgs)">
            <summary>
            Raises the DeviceRemoved event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPDiscovery.OnSearchComplete(ManagedUPnP.SearchCompleteEventArgs)">
            <summary>
            Raises the search complete event.
            </summary>
            <param name="e">The event argument.</param>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPDiscovery.OnSearchStarted(System.EventArgs)">
            <summary>
            Raises the search started event.
            </summary>
            <param name="e">The event argument.</param>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPDiscovery.OnSearchEnded(System.EventArgs)">
            <summary>
            Raises the search ended event.
            </summary>
            <param name="e">The event argument.</param>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPDiscovery.OnSearchFailed(System.EventArgs)">
            <summary>
            Raises the search failed event.
            </summary>
            <param name="e">The event argument.</param>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPDiscovery.IsRunning">
            <summary>
            Returns true if the discover is running.
            </summary>
            <returns>True if running, false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPDiscovery.CheckNotRunning">
            <summary>
            Checks to see if the discovery is running and raises an exception if it is.
            </summary>
            <returns>True if teh discovery is not running.</returns>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPDiscovery.Stop">
            <summary>
            Stops the UPnP discovery.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPDiscovery.Start">
            <summary>
            Starts the UPnP discovery.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPDiscovery.SetActive(System.Boolean)">
            <summary>
            Sets the active property (post initialisation).
            </summary>
            <param name="value">The new value for the active property.</param>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPDiscovery.DeviceFound(ManagedUPnP.DeviceAddedEventArgs,System.Boolean)">
            <summary>
            Raises events for when a new device is found.
            </summary>
            <param name="e">The event arguments containing the device information for the device that was found.</param>
            <param name="foundRoot">True if the device came from the discovery, false if it came from child devices.</param>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPDiscovery.mdDiscovery_SearchComplete(System.Object,ManagedUPnP.SearchCompleteEventArgs)">
            <summary>
            Handles the SearchComplete event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPDiscovery.mdDiscovery_DeviceRemoved(System.Object,ManagedUPnP.DeviceRemovedEventArgs)">
            <summary>
            Handles the device removed event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.Components.UPnPDiscovery.mdDiscovery_DeviceAdded(System.Object,ManagedUPnP.DeviceAddedEventArgs)">
            <summary>
            Handles the DeviceAdded event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="E:ManagedUPnP.Components.UPnPDiscovery.DeviceAdded">
            <summary>
            Occurs when a new device is discoverred.
            </summary>
        </member>
        <member name="E:ManagedUPnP.Components.UPnPDiscovery.ServiceAdded">
            <summary>
            Occurs when a new service is discoverred.
            </summary>
        </member>
        <member name="E:ManagedUPnP.Components.UPnPDiscovery.DeviceRemoved">
            <summary>
            Occrs when a device is removed.
            </summary>
        </member>
        <member name="E:ManagedUPnP.Components.UPnPDiscovery.SearchComplete">
            <summary>
            Occurs when a search has completed its initial phase.
            </summary>
        </member>
        <member name="E:ManagedUPnP.Components.UPnPDiscovery.SearchStarted">
            <summary>
            Occurs when a search is started.
            </summary>
        </member>
        <member name="E:ManagedUPnP.Components.UPnPDiscovery.SearchFailed">
            <summary>
            Occurs when a search fails to start. The SearchEnded event 
            is still fired after this event on failure.
            </summary>
        </member>
        <member name="E:ManagedUPnP.Components.UPnPDiscovery.SearchEnded">
            <summary>
            Occurs when the search ends, either as a result of a failure, or
            as a result of the search being stopped.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Components.UPnPDiscovery.Initialised">
            <summary>
            Gets whether initialisation is finished or not.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Components.UPnPDiscovery.SearchURI">
            <summary>
            Gets or sets the Search URI to filter devices by. 
            A search uri can be a Device.Type, Device.UDN, or Service.ServiceTypeIdentifier in the form
            of urn:schemas-upnp-org:type:ver, uuid:00000000-0000-0000-0000-000000000000, or
            urn:schemas-upnp-org:service:type:ver. If Service.ServiceTypeIdentifier is used, all devices which 
            have a direct service of that type will be returned. This property can only be changed when search is
            not Active.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Components.UPnPDiscovery.DeviceFindOption">
            <summary>
            Gets or sets which devices the DeviceAdded event handler should be raised for. This property
            can only be changed when search is not Active.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Components.UPnPDiscovery.ServiceFindOption">
            <summary>
            Gets or sets which services the ServiceAdded event handler should be raised for. This property
            can only be changed when search is not Active.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Components.UPnPDiscovery.ResolveNetworkInterface">
            <summary>
            Gets or sets whether to resolve network interfaces of devices. This property
            can only be changed when search is not Active.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Components.UPnPDiscovery.AddressFamilyFlags">
            <summary>
            Gets or sets which type of network protocols search for devices on. This property
            can only be changed when search is not Active. This parameter will only be effective
            on Windows Vista and above.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Components.UPnPDiscovery.Active">
            <summary>
            Gets or sets whether the search is active.
            </summary>
        </member>
        <member name="T:ManagedUPnP.CodeGen.NamespaceDoc">
            <summary>
            The ManagedUPnP.CodeGen namespace contains classes for
            the generation of C# code from Devices or Services. It 
            is only used for generation. Generated classes do not 
            need this namespace to build.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Service">
            <summary>
            Encapsulates a UPnP service.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Service.msCOMService">
            <summary>
            The underlying native service this service controls.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Service.mscCallback">
            <summary>
            The callback object in use for this service.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Service.mbDead">
            <summary>
            True if this service is no longer available.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Service.mdDevice">
            <summary>
            The immediate device for this service.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Service.#ctor(ManagedUPnP.Device,UPNPLib.IUPnPService)">
            <summary>
            Creates a new service object.
            </summary>
            <param name="device">The immediate device for the service.</param>
            <param name="comService">The native service for the service.</param>
        </member>
        <member name="M:ManagedUPnP.Service.#ctor(UPNPLib.IUPnPDevice,System.Guid,UPNPLib.IUPnPService)">
            <summary>
            Creates a new service object.
            </summary>
            <param name="comDevice">The immediate native device for the object.</param>
            <param name="interfaceGuid">The network interface Guid or Guid.Empty for none.</param>
            <param name="comService">The native service for the service.</param>
        </member>
        <member name="M:ManagedUPnP.Service.#ctor(ManagedUPnP.Service)">
            <summary>
            Creates a new service object.
            </summary>
            <param name="service">The service to use for this service.</param>
        </member>
        <member name="M:ManagedUPnP.Service.OnStateVariableChanged(ManagedUPnP.StateVariableChangedEventArgs)">
            <summary>
            Raises the StateVariableChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.Service.OnServiceInstanceDied(ManagedUPnP.ServiceInstanceDiedEventArgs)">
            <summary>
            Raises the ServiceInstanceDied event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.Service.CheckOutParams(System.Object[],System.UInt32)">
            <summary>
            Checks the out parameters from the result of an action 
            to ensure the enough parameters were returned.
            </summary>
            <param name="outParams">The out params returned by the action.</param>
            <param name="numberRequired">The minimum number of required out parameters.</param>
        </member>
        <member name="M:ManagedUPnP.Service.QueryStateVariable``1(System.String)">
            <summary>
            Queries a state variable on the service.
            </summary>
            <typeparam name="T">The expected return type for the state variable.</typeparam>
            <param name="name">The name of the state variable.</param>
            <returns>The return value of the state variable.</returns>
            <exception cref="T:ManagedUPnP.UPnPException"></exception>
            <exception cref="T:System.NotSupportedException">Underlying com service is null.</exception>
        </member>
        <member name="M:ManagedUPnP.Service.QueryStateVariable(System.String)">
            <summary>
            Queries a state variable on the service.
            </summary>
            <param name="name">The name of the state variable.</param>
            <returns>The value of the state variable.</returns>
            <exception cref="T:ManagedUPnP.UPnPException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:ManagedUPnP.Service.InvokeAction``1(System.String,``0@,System.Object[])">
            <summary>
            Invokes an action with has one out parameter.
            </summary>
            <typeparam name="T1">The type of the out parameter.</typeparam>
            <param name="name">The name of the action.</param>
            <param name="out1">The variable to receive the out parameter.</param>
            <param name="inParams">The in parameters for the action.</param>
            <exception cref="T:ManagedUPnP.UPnPException"></exception>
            <exception cref="T:System.MissingMethodException">Action not found or failed.</exception>
            <exception cref="T:System.NotSupportedException">Underlying native service is null.</exception>
        </member>
        <member name="M:ManagedUPnP.Service.InvokeAction``2(System.String,``0@,``1@,System.Object[])">
            <summary>
            Invokes an action with has two out parameters.
            </summary>
            <typeparam name="T1">The type of the first out parameter.</typeparam>
            <typeparam name="T2">The type of the second out parameter.</typeparam>
            <param name="name">The name of the action.</param>
            <param name="out1">The variable to receive the first out parameter.</param>
            <param name="out2">The variable to receive the second out parameter.</param>
            <param name="inParams">The in parameters for the action.</param>
            <exception cref="T:ManagedUPnP.UPnPException"></exception>
            <exception cref="T:System.MissingMethodException">Action not found or failed.</exception>
            <exception cref="T:System.NotSupportedException">Underlying native service is null.</exception>
        </member>
        <member name="M:ManagedUPnP.Service.InvokeAction``3(System.String,``0@,``1@,``2@,System.Object[])">
            <summary>
            Invokes an action with has three out parameters.
            </summary>
            <typeparam name="T1">The type of the first out parameter.</typeparam>
            <typeparam name="T2">The type of the second out parameter.</typeparam>
            <typeparam name="T3">The type of the third out parameter.</typeparam>
            <param name="name">The name of the action.</param>
            <param name="out1">The variable to receive the first out parameter.</param>
            <param name="out2">The variable to receive the second out parameter.</param>
            <param name="out3">The variable to receive the third out parameter.</param>
            <param name="inParams">The in parameters for the action.</param>
            <exception cref="T:ManagedUPnP.UPnPException"></exception>
            <exception cref="T:System.MissingMethodException">Action not found or failed.</exception>
            <exception cref="T:System.NotSupportedException">Underlying native service is null.</exception>
        </member>
        <member name="M:ManagedUPnP.Service.InvokeAction``4(System.String,``0@,``1@,``2@,``3@,System.Object[])">
            <summary>
            Invokes an action with has four out parameters.
            </summary>
            <typeparam name="T1">The type of the first out parameter.</typeparam>
            <typeparam name="T2">The type of the second out parameter.</typeparam>
            <typeparam name="T3">The type of the third out parameter.</typeparam>
            <typeparam name="T4">The type of the forth out parameter.</typeparam>
            <param name="name">The name of the action.</param>
            <param name="out1">The variable to receive the first out parameter.</param>
            <param name="out2">The variable to receive the second out parameter.</param>
            <param name="out3">The variable to receive the third out parameter.</param>
            <param name="out4">The variable to receive the forth out parameter.</param>
            <param name="inParams">The in parameters for the action.</param>
            <exception cref="T:ManagedUPnP.UPnPException"></exception>
            <exception cref="T:System.MissingMethodException">Action not found or failed.</exception>
            <exception cref="T:System.NotSupportedException">Underlying native service is null.</exception>
        </member>
        <member name="M:ManagedUPnP.Service.InvokeAction``5(System.String,``0@,``1@,``2@,``3@,``4@,System.Object[])">
            <summary>
            Invokes an action with has five out parameters.
            </summary>
            <typeparam name="T1">The type of the first out parameter.</typeparam>
            <typeparam name="T2">The type of the second out parameter.</typeparam>
            <typeparam name="T3">The type of the third out parameter.</typeparam>
            <typeparam name="T4">The type of the forth out parameter.</typeparam>
            <typeparam name="T5">The type of the fifth out parameter.</typeparam>
            <param name="name">The name of the action.</param>
            <param name="out1">The variable to receive the first out parameter.</param>
            <param name="out2">The variable to receive the second out parameter.</param>
            <param name="out3">The variable to receive the third out parameter.</param>
            <param name="out4">The variable to receive the forth out parameter.</param>
            <param name="out5">The variable to receive the fifth out parameter.</param>
            <param name="inParams">The in parameters for the action.</param>
            <exception cref="T:ManagedUPnP.UPnPException"></exception>
            <exception cref="T:System.MissingMethodException">Action not found or failed.</exception>
            <exception cref="T:System.NotSupportedException">Underlying native service is null.</exception>
        </member>
        <member name="M:ManagedUPnP.Service.InvokeAction``6(System.String,``0@,``1@,``2@,``3@,``4@,``5@,System.Object[])">
            <summary>
            Invokes an action with has six out parameters.
            </summary>
            <typeparam name="T1">The type of the first out parameter.</typeparam>
            <typeparam name="T2">The type of the second out parameter.</typeparam>
            <typeparam name="T3">The type of the third out parameter.</typeparam>
            <typeparam name="T4">The type of the forth out parameter.</typeparam>
            <typeparam name="T5">The type of the fifth out parameter.</typeparam>
            <typeparam name="T6">The type of the sixth out parameter.</typeparam>
            <param name="name">The name of the action.</param>
            <param name="out1">The variable to receive the first out parameter.</param>
            <param name="out2">The variable to receive the second out parameter.</param>
            <param name="out3">The variable to receive the third out parameter.</param>
            <param name="out4">The variable to receive the forth out parameter.</param>
            <param name="out5">The variable to receive the fifth out parameter.</param>
            <param name="out6">The variable to receive the sixth out parameter.</param>
            <param name="inParams">The in parameters for the action.</param>
            <exception cref="T:ManagedUPnP.UPnPException"></exception>
            <exception cref="T:System.MissingMethodException">Action not found or failed.</exception>
            <exception cref="T:System.NotSupportedException">Underlying native service is null.</exception>
        </member>
        <member name="M:ManagedUPnP.Service.InvokeAction``7(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,System.Object[])">
            <summary>
            Invokes an action with has seven out parameters.
            </summary>
            <typeparam name="T1">The type of the first out parameter.</typeparam>
            <typeparam name="T2">The type of the second out parameter.</typeparam>
            <typeparam name="T3">The type of the third out parameter.</typeparam>
            <typeparam name="T4">The type of the forth out parameter.</typeparam>
            <typeparam name="T5">The type of the fifth out parameter.</typeparam>
            <typeparam name="T6">The type of the sixth out parameter.</typeparam>
            <typeparam name="T7">The type of the seventh out parameter.</typeparam>
            <param name="name">The name of the action.</param>
            <param name="out1">The variable to receive the first out parameter.</param>
            <param name="out2">The variable to receive the second out parameter.</param>
            <param name="out3">The variable to receive the third out parameter.</param>
            <param name="out4">The variable to receive the forth out parameter.</param>
            <param name="out5">The variable to receive the fifth out parameter.</param>
            <param name="out6">The variable to receive the sixth out parameter.</param>
            <param name="out7">The variable to receive the seventh out parameter.</param>
            <param name="inParams">The in parameters for the action.</param>
            <exception cref="T:ManagedUPnP.UPnPException"></exception>
            <exception cref="T:System.MissingMethodException">Action not found or failed.</exception>
            <exception cref="T:System.NotSupportedException">Underlying native service is null.</exception>
        </member>
        <member name="M:ManagedUPnP.Service.InvokeAction(System.String,System.Object[])">
            <summary>
            Invokes an action.
            </summary>
            <param name="name">The name of the action.</param>
            <param name="inParams">The in parameters for the action.</param>
            <returns>An array of objects representing the out parameters for the action.</returns>
            <exception cref="T:ManagedUPnP.UPnPException"></exception>
            <exception cref="T:System.MissingMethodException">Action not found or failed.</exception>
            <exception cref="T:System.NotSupportedException">Underlying native service is null.</exception>
        </member>
        <member name="M:ManagedUPnP.Service.CanAccess(ManagedUPnP.Service)">
            <summary>
            Gets whether this service has the ability to access another service.
            </summary>
            <param name="service">The service to test to accessibility.</param>
            <returns>True.</returns>
        </member>
        <member name="M:ManagedUPnP.Service.ToString">
            <summary>
            Gets this service as readable text.
            </summary>
            <returns>Gets the readable info as a string.</returns>
        </member>
        <member name="M:ManagedUPnP.Service.Finalize">
            <summary>
            Finalisation.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Service.Dispose">
            <summary>
            Disposes the service.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Service.Dispose(System.Boolean)">
            <summary>
            Disposes the service.
            </summary>
            <param name="disposeManaged">True to dispose managed objects.</param>
        </member>
        <member name="E:ManagedUPnP.Service.StateVariableChanged">
            <summary>
            Raised when an event enabled state variable changes.
            </summary>
        </member>
        <member name="E:ManagedUPnP.Service.ServiceInstanceDied">
            <summary>
            Raised when the service is no longer available.
            </summary>
            <remarks>
            Dead is set to true after this event is received.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.Service.COMDevice">
            <summary>
            Gets the underlying native com device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Service.COMService">
            <summary>
            Gets the underlying native com service.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Service.Dead">
            <summary>
            Gets whether this service instance has died.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Service.Device">
            <summary>
            Gets the device for this service.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Service.ServiceTypeIdentifier">
            <summary>
            Gerts the service type identifier for this service.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Service.Id">
            <summary>
            Gets the Id for this service.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Service.LastTransportStatus">
            <summary>
            Gets the result of the last invoke action or state variable query.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Service.Key">
            <summary>
            Gets the globally unique key for this service.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Service.FriendlyServiceTypeIdentifier">
            <summary>
            Gets the friendly service type identifier name
            </summary>
        </member>
        <member name="P:ManagedUPnP.Service.Name">
            <summary>
            Gets the readable name of this service.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Service.ManagedUPnP#IAutoDiscoveryService#Service">
            <summary>
            Gets this service
            </summary>
        </member>
        <member name="T:ManagedUPnP.Service.ServiceCallback">
            <summary>
            Encapsulates the IUPnPServiceCallback class.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Service.ServiceCallback.msService">
            <summary>
            The service for which this callback links to.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Service.ServiceCallback.#ctor(ManagedUPnP.Service)">
            <summary>
            Creates a new service callback object.
            </summary>
            <param name="service">The service for which to raise the events on.</param>
        </member>
        <member name="M:ManagedUPnP.Service.ServiceCallback.Ignore">
            <summary>
            Sets this callback object to ignore all subsequent events.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Service.ServiceCallback.UPNPLib#IUPnPServiceCallback#StateVariableChanged(UPNPLib.UPnPService,System.String,System.Object)">
            <summary>
            Occurs when an event enabled state variable changes.
            </summary>
            <param name="service">The service for which the state variable changed.</param>
            <param name="stateVarName">The state variable name.</param>
            <param name="stateVarValue">The new value of the state variable.</param>
        </member>
        <member name="M:ManagedUPnP.Service.ServiceCallback.UPNPLib#IUPnPServiceCallback#ServiceInstanceDied(UPNPLib.UPnPService)">
            <summary>
            Occurs when a service instance is no longer available.
            </summary>
            <param name="service">The service instance which is no longer available.</param>
        </member>
        <member name="P:ManagedUPnP.Service.ServiceCallback.Service">
            <summary>
            Gets the service for which this callback is linked to.
            </summary>
        </member>
        <member name="T:ManagedUPnP.HTTPStatus">
            <summary>
            Holds all http status values.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.Continue">
            <summary>
            Continue.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.SwitchingProtocols">
            <summary>
            Switching protocols.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.OK">
            <summary>
            OK.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.Created">
            <summary>
            Created.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.Accepted">
            <summary>
            Accepted.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.NonAuthoritativeInfo">
            <summary>
            Non-authoritative information.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.NoContent">
            <summary>
            No content.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.ResetContent">
            <summary>
            Reset content.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.PartialContent">
            <summary>
            Partial content.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.ObjectMoved">
            <summary>
            Object moved.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.NotModified">
            <summary>
            Not modified. 
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.TemporaryRedirect">
            <summary>
            Temporary redirect.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.BadRequest">
            <summary>
            Bad request.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.AccessDenied">
            <summary>
            Access denied.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.InvalidArgs">
            <summary>
            Invalid arguments.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.Forbidden">
            <summary>
            Forbidden.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.FileNotFound">
            <summary>
            File or directory not found.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.MethodNotAllowed">
            <summary>
            Method not allowed.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.InvalidMimeType">
            <summary>
            Client browser does not accept the MIME type of the requested page.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.ProxyAuthenticationRequired">
            <summary>
            Proxy authentication required.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.PreconditionFailed">
            <summary>
            Precondition failed.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.RequestTooLarge">
            <summary>
            Request entity too large.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.RequestURLTooLong">
            <summary>
            Request-URL too long.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.UnsupportedMediaType">
            <summary>
            Unsupported media type.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.RangeNotSatisfiable">
            <summary>
            Requested range not satisfiable.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.ExecutionFailed">
            <summary>
            Execution failed.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.Locked">
            <summary>
            Locked error.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.InternalError">
            <summary>
            Internal server error.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.ActionFailed">
            <summary>
            An action failed on the service.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.BadGateway">
            <summary>
            Bad Gateway.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.ServiceUnavailable">
            <summary>
            Service unavailable.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.GatewayTimeout">
            <summary>
            Gateway timeout.
            </summary>
        </member>
        <member name="F:ManagedUPnP.HTTPStatus.HTTPVerNotSupported">
            <summary>
            HTTP version not supported.
            </summary>
        </member>
        <member name="T:ManagedUPnP.IUPnPServicesExtensions">
            <summary>
            Extends the IUPnPServices interface.
            </summary>
        </member>
        <member name="M:ManagedUPnP.IUPnPServicesExtensions.ReadableInfo(UPNPLib.IUPnPServices,System.Int32)">
            <summary>
            Gets the readable info for a native com service.
            </summary>
            <param name="services">The services to get the readable info for.</param>
            <param name="indent">The indent for the readable info.</param>
            <returns>The readable info for the native com serivce.</returns>
        </member>
        <member name="T:ManagedUPnP.IUPnPServiceExtensions">
            <summary>
            Extends the IUPnPService extensions.
            </summary>
        </member>
        <member name="M:ManagedUPnP.IUPnPServiceExtensions.ReadableInfo(UPNPLib.IUPnPService,System.Int32)">
            <summary>
            Gets the readable info for a native com service.
            </summary>
            <param name="service">The service to get the readable info for.</param>
            <param name="indent">The indent for the readable info.</param>
            <returns>The readable info for the native com serivce.</returns>
        </member>
        <member name="M:ManagedUPnP.IUPnPServiceExtensions.GetFriendlyServiceTypeIdentifier(UPNPLib.IUPnPService)">
            <summary>
            Gets the friendly service type identifier for a native com service.
            </summary>
            <param name="service">The native com service.</param>
            <returns>The service type identifier for the native com service.</returns>
        </member>
        <member name="T:ManagedUPnP.ServiceInstanceDiedEventHandler">
            <summary>
            Event handler for when a service instance dies.
            </summary>
            <param name="sender">The sender of the events.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ManagedUPnP.Descriptions.StateVariableDataType">
            <summary>
            Encapsulates an state variable data type.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.tunknown">
            <summary>
            Unknown type.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.turi">
            <summary>
            URI type.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.tboolean">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.tui1">
            <summary>
            Unsigned 1-byte integer.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.tui2">
            <summary>
            Unsigned 2-byte integer.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.tui4">
            <summary>
            Unsigned 4-byte integer.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.ti1">
            <summary>
            Signed 1-byte integer. 
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.ti2">
            <summary>
            Signed 2-byte integer. 
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.ti4">
            <summary>
            Signed 4-byte integer, same format as int. 
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.tint">
            <summary>
            4-byte ﬁxed point integer, between –2147483648 and 2147483647, may have leading zeros, no commas.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.tr4">
            <summary>
            4-byte ﬂoating point, same format as ﬂoat.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.tr8">
            <summary>
            8-byte ﬂoating point, same format as ﬂoat number Same as r8.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.tﬁxed_14_4">
            <summary>
            Same as r8, but a maximum of 14 digits to the left of the decimal, and a maximum of 4 to the right.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.tﬂoat">
            <summary>
            Floating-point number. Mantissa and/or exponent may have leading sign or leading zeros.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.tchar">
            <summary>
            Unicode string, one character in length.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.tstring">
            <summary>
             Unicode string, unlimited length.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.tdate">
            <summary>
            Month, day, year conforming to ISO 8601, without time data.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.tdateTime">
            <summary>
            ISO8601 date with time, but no time zone.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.tdateTime_tz">
            <summary>
            ISO8601 date with optional time and time zone.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.ttime">
            <summary>
            Time as speciﬁed in ISO8601 with no date and time zone.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.ttime_tz">
            <summary>
            Time as speciﬁed in ISO8601 with optional time zone, but no date.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.tbin_base64">
            <summary>
            Binary base64
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.tnumber">
            <summary>
            Number
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.tuuid">
            <summary>
            UUID
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDataType.tbin_hex">
            <summary>
            Hex
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.DeviceServicesDescription">
            <summary>
            Encapsulates a list of services for a device.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.DeviceServicesDescription.msElement">
            <summary>
            The element name for a service.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.DeviceServicesDescription.mdDevice">
            <summary>
            The device description for this list of services.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceServicesDescription.IsStartNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceServicesDescription.IsEndNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceServicesDescription.#ctor(ManagedUPnP.Descriptions.Description,ManagedUPnP.Descriptions.DeviceDescription)">
            <summary>
            Creates a new empty device services list.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="device">The device description that owns the services.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceServicesDescription.#ctor(ManagedUPnP.Descriptions.Description,ManagedUPnP.Descriptions.DeviceDescription,System.Xml.XmlTextReader)">
            <summary>
            Creates a new device services list from an XML reader.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="device">The device description for the services list.</param>
            <param name="reader">The reader to load the service descriptions from.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceServicesDescription.UseNode(System.Xml.XmlTextReader,System.String)">
            <summary>
            Uses an XML node for this description.
            </summary>
            <param name="reader">The XML reader to use the node from.</param>
            <param name="lastNodeName">The last node name.</param>
            <returns>True if the node was processed false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceServicesDescription.IsStartNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceServicesDescription.IsEndNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceServicesDescription.Device">
            <summary>
            Gets the device description for this list of services.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.DeviceDescription">
            <summary>
            Encapsulates a description for a device.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.DeviceDescription.msElement">
            <summary>
            The element name for a device.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.DeviceDescription.mdDevices">
            <summary>
            The list of immediate devices for this device description.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.DeviceDescription.mdDeviceServices">
            <summary>
            The list of immediate services for this device description.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.DeviceDescription.midIcons">
            <summary>
            The list of icons for this device description.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceDescription.IsStartNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceDescription.IsEndNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceDescription.#ctor(ManagedUPnP.Descriptions.Description)">
            <summary>
            Creates a new empty device description.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceDescription.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates a new device description from a reader.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The XML text reader.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceDescription.Initialise">
            <summary>
            Initialises the device description.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceDescription.UseNode(System.Xml.XmlTextReader,System.String)">
            <summary>
            Uses an XML node for this description.
            </summary>
            <param name="reader">The XML reader to use the node from.</param>
            <param name="lastNodeName">The last node name.</param>
            <returns>True if the node was processed false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceDescription.IsStartNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceDescription.IsEndNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceDescription.FindDevice(System.String)">
            <summary>
            Finds a device description recursively by UDN.
            </summary>
            <param name="udn">The UDN to search for.</param>
            <returns>The device description found or null if not found.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceDescription.ToStringWithFullServices(ManagedUPnP.Descriptions.RootDescription,System.Int32)">
            <summary>
            Gets this device description with full service information.
            </summary>
            <param name="rootDescription">The root description.</param>
            <param name="indent">The indent for the string.</param>
            <returns>The string representation of the device.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceDescription.ToString(System.Int32)">
            <summary>
            Converts the description to a string.
            </summary>
            <param name="indent">The indent for the string.</param>
            <returns>The string representation for the description.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceDescription.Devices">
            <summary>
            Gets the immediate devices for the description.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceDescription.DeviceServices">
            <summary>
            Gets the immediate services for the device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceDescription.Icons">
            <summary>
            Gets the icons for the device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceDescription.DeviceType">
            <summary>
            Gets the device type.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceDescription.FriendlyName">
            <summary>
            Gets the friendly name of the device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceDescription.Manufacturer">
            <summary>
            Gets the manufacturer of the device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceDescription.ManufacturerURL">
            <summary>
            Gets the manufacturer URL for the device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceDescription.ModelDescription">
            <summary>
            Gets the model description text for the device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceDescription.ModelNumber">
            <summary>
            Gets the model number for the device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceDescription.ModelName">
            <summary>
            Gets the model name for the device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceDescription.ModelURL">
            <summary>
            Gets the URL for the device model.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceDescription.SerialNumber">
            <summary>
            Gets the serial number for the device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceDescription.UDN">
            <summary>
            Gets the Unique Device Number for the device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceDescription.UniversalProductCode">
            <summary>
            Gets the Universal Product Code for the device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceDescription.PresentationURL">
            <summary>
            Gets the presentation URL for the device.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.DescriptionList`1">
            <summary>
            Encapsulates a list of descriptions.
            </summary>
            <typeparam name="T">The type for the items in the list.</typeparam>
        </member>
        <member name="F:ManagedUPnP.Descriptions.DescriptionList`1.mlList">
            <summary>
            The list of descriptions.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DescriptionList`1.#ctor(ManagedUPnP.Descriptions.Description)">
            <summary>
            Creates a new description list.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DescriptionList`1.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates a new description list from an XML reader.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The XML reader.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DescriptionList`1.AddItemsFrom(System.Xml.XmlTextReader)">
            <summary>
            Adds items from an XML reader.
            </summary>
            <param name="reader">The XML reader.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DescriptionList`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DescriptionList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for the list.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DescriptionList`1.Count">
            <summary>
            Gets the number of items in the description.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DescriptionList`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index for the item.</param>
            <returns>The item of type T.</returns>
        </member>
        <member name="T:ManagedUPnP.CodeGen.DeviceGen">
            <summary>
            Encapsulates a static class which can generate class code for a device.
            </summary>
        </member>
        <member name="F:ManagedUPnP.CodeGen.DeviceGen.mcgCodeGenProvider">
            <summary>
            The code generation constant provider to use.
            </summary>
        </member>
        <member name="M:ManagedUPnP.CodeGen.DeviceGen.#ctor(ManagedUPnP.CodeGen.ICodeGenProvider)">
            <summary>
            Creates a new device class code generator.
            </summary>
            <param name="codeGenProvider">The provider to use when generating the code.</param>
        </member>
        <member name="M:ManagedUPnP.CodeGen.DeviceGen.GenerateServicePropertyCode(ManagedUPnP.Device,System.Boolean,ManagedUPnP.CodeGen.StringConstants,System.Text.StringBuilder,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Generates the code for the service properties.
            </summary>
            <param name="device">The device to generate for.</param>
            <param name="specificServices">True if specific service classes are being used, false if using the Service class.</param>
            <param name="consts">The string constants list.</param>
            <param name="specificServiceClasses">The dictionary of IDs, ClassNames for the services or null for default.</param>
            <param name="properties">A StringBuilder to append the properties code to.</param>
        </member>
        <member name="M:ManagedUPnP.CodeGen.DeviceGen.GenerateDevicePropertyCode(ManagedUPnP.Device,System.Boolean,ManagedUPnP.CodeGen.StringConstants,System.Text.StringBuilder,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Generates the code for the device properties.
            </summary>
            <param name="device">The device to generate for.</param>
            <param name="specificDevices">True if specific device classes are being used, false if using the Device class.</param>
            <param name="consts">The string constants list.</param>
            <param name="specificDeviceClasses">The dictionary of UDNs, ClassNames for the devices or null for default.</param>
            <param name="properties">A StringBuilder to append the properties code to.</param>
        </member>
        <member name="M:ManagedUPnP.CodeGen.DeviceGen.DefaultCodeGenClassName(ManagedUPnP.Device,ManagedUPnP.CodeGen.ICodeGenProvider)">
            <summary>
            Gets the default code generation class name for a device.
            </summary>
            <param name="device">The device to get the class name for.</param>
            <param name="codeGenProvider">The code generation provider to use.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.DeviceGen.GenerateClassFor(ManagedUPnP.Device,System.String,System.String,ManagedUPnP.CodeGen.ClassScope,System.Boolean,System.Boolean,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Generates the class code for a device.
            </summary>
            <param name="device">The device to generate code for.</param>
            <param name="className">The class name of the device class or null to use friendly name.</param>
            <param name="namespaceName">The namespace for the class.</param>
            <param name="classScope">The scope of the class.</param>
            <param name="partial">True to make the class partial, false otherwise.</param>
            <param name="specificDevices">True if generating properties for device specific class types, false to use device non-specific class types.</param>
            <param name="specificServiceNamespace">The name of the service namespace if using specific service class types, null to use service non-specific class types.</param>
            <param name="specificDeviceClasses">The dictionary of UDNs, ClassNames for the devices or null for default / none.</param>
            <param name="specificServiceClasses">The dictionary of IDs, ClassNames for the services or null for default / none.</param>
            <returns>The string representing the code for the class.</returns>
        </member>
        <member name="P:ManagedUPnP.CodeGen.DeviceGen.CodeGenProvider">
            <summary>
            Gets the code generation provider.
            </summary>
        </member>
        <member name="T:ManagedUPnP.ServiceCheckFlags">
            <summary>
            Used for code generation for device check comparison.
            </summary>
        </member>
        <member name="F:ManagedUPnP.ServiceCheckFlags.None">
            <summary>
            No checks are performed.
            </summary>
        </member>
        <member name="F:ManagedUPnP.ServiceCheckFlags.ServiceType">
            <summary>
            Check to ensure service type id matches.
            </summary>
        </member>
        <member name="F:ManagedUPnP.ServiceCheckFlags.ServiceId">
            <summary>
            Check to ensure service Id matches.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.SpecVersionDescription">
            <summary>
            Encapsulates the spec version.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.SpecVersionDescription.msSpecVersionElement">
            <summary>
            The element name for the spec version.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.SpecVersionDescription.IsStartNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.SpecVersionDescription.IsEndNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.SpecVersionDescription.#ctor(ManagedUPnP.Descriptions.Description)">
            <summary>
            Creates a new spec version description.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.SpecVersionDescription.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates a new spec version description from an XML reason.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The XML reader to get the spec version from.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.SpecVersionDescription.IsEndNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.SpecVersionDescription.IsStartNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.SpecVersionDescription.ToString(System.Int32)">
            <summary>
            Converts the description to a string.
            </summary>
            <param name="indent">The indent for the string.</param>
            <returns>The string representation for the description.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.SpecVersionDescription.Minor">
            <summary>
            Gets the minor version number.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.SpecVersionDescription.Major">
            <summary>
            Gets the major version number.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.StateVariableDescription">
            <summary>
            Encapsulates the description for the state variable.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDescription.msElement">
            <summary>
            The element name for the state variable description.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDescription.msSendEvents">
            <summary>
            True if the state variable is evented.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDescription.maAllowedValues">
            <summary>
            The allowed values for the state variable.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.StateVariableDescription.marAllowedRange">
            <summary>
            The allowed range for the state variable.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDescription.IsStartNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDescription.IsEndNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDescription.#ctor(ManagedUPnP.Descriptions.Description)">
            <summary>
            Creates a new state variable description.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDescription.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates a new state variable description from an XML reader.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The XML text reader to create the description from.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDescription.Initialise">
            <summary>
            Initialises the state variable description.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDescription.UseNode(System.Xml.XmlTextReader,System.String)">
            <summary>
            Uses an XML node for this description.
            </summary>
            <param name="reader">The XML reader to use the node from.</param>
            <param name="lastNodeName">The last node name.</param>
            <returns>True if the node was processed false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDescription.IsEndNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDescription.IsStartNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDescription.ToString(System.Int32)">
            <summary>
            Converts the description to a string.
            </summary>
            <param name="indent">The indent for the string.</param>
            <returns>The string representation for the description.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.StateVariableDescription.DefaultValue">
            <summary>
            Gets the default value for the state variable.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.StateVariableDescription.Name">
            <summary>
            Gets the name of the state variable.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.StateVariableDescription.DataTypeValue">
            <summary>
            Gets the data type for this state variable.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.StateVariableDescription.DataType">
            <summary>
            Gets the data type of the state variable.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.StateVariableDescription.SendEvents">
            <summary>
            Gets whether this state variable is evented.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.StateVariableDescription.AllowedValues">
            <summary>
            Gets the allowed values description for this state variable.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.StateVariableDescription.AllowedRange">
            <summary>
            Gets the allowed range description for this state variable.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.ActionDescription">
            <summary>
            Encapsulates an action for a service.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.ActionDescription.msElement">
            <summary>
            The element name for an action.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.ActionDescription.maArguments">
            <summary>
            Contains the arguments for the action.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ActionDescription.IsStartNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ActionDescription.IsEndNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ActionDescription.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates a new action description object.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The reader to get the action information from.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ActionDescription.Initialise">
            <summary>
            Initialises the action description.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ActionDescription.UseNode(System.Xml.XmlTextReader,System.String)">
            <summary>
            Uses an XML node for this description.
            </summary>
            <param name="reader">The XML reader to use the node from.</param>
            <param name="lastNodeName">The last node name.</param>
            <returns>True if the node was processed false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ActionDescription.IsEndNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ActionDescription.IsStartNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ActionDescription.ToString(System.Int32)">
            <summary>
            Converts the description to a string.
            </summary>
            <param name="indent">The indent for the string.</param>
            <returns>The string representation for the description.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.ActionDescription.Arguments">
            <summary>
            Gets the description for the arguments.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.ActionDescription.Name">
            <summary>
            Gets the name of the action.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.IconDescription">
            <summary>
            Encapsulates an description for an icon.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.IconDescription.msElement">
            <summary>
            The element name for an icon.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.IconDescription.IsStartNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.IconDescription.IsEndNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.IconDescription.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates a new icon description.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The reader to load the icon from.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.IconDescription.IsStartNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.IconDescription.IsEndNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.IconDescription.ToString(System.Int32)">
            <summary>
            Gets the icon description as a string.
            </summary>
            <param name="indent">The indent for the string.</param>
            <returns>The icon description as a string.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.IconDescription.MimeType">
            <summary>
            Gets the mime type for the icon.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.IconDescription.Width">
            <summary>
            Gets the width for the icon.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.IconDescription.Height">
            <summary>
            Gets the height for the icon.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.IconDescription.ColorDepth">
            <summary>
            Gets the color depth of the icon.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.IconDescription.URL">
            <summary>
            Gets the URL for the icon.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.DevicesDescription">
            <summary>
            Encapsulates a description for a list of devices.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.DevicesDescription.msElement">
            <summary>
            The element name for a device.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DevicesDescription.#ctor(ManagedUPnP.Descriptions.Description)">
            <summary>
            Creates a new empty devices description.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DevicesDescription.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates a new devices description from a reader.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The XML text reader.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DevicesDescription.UseNode(System.Xml.XmlTextReader,System.String)">
            <summary>
            Uses an XML node for this description.
            </summary>
            <param name="reader">The XML reader to use the node from.</param>
            <param name="lastNodeName">The last node name.</param>
            <returns>True if the node was processed false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DevicesDescription.IsStartNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DevicesDescription.IsEndNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DevicesDescription.IsStartNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DevicesDescription.IsEndNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DevicesDescription.FindDevice(System.String)">
            <summary>
            Finds a device description recursively by UDN.
            </summary>
            <param name="udn">The UDN to search for.</param>
            <returns>The device description found or null if not found.</returns>
        </member>
        <member name="M:ManagedUPnP.Components.IEnumerableDelegateExtensions.InvokeEventGUIThreadSafe(System.Collections.Generic.IEnumerable{System.Delegate},System.Object[])">
            <summary>
            Invokes an event handlers invocation list by calling it on the GUI thread if available.
            </summary>
            <param name="invocationList">The invocation list for the event handler.</param>
            <param name="args">The arguments to pass to the event handlers delegates.</param>
            <example>
                <code>
                    EventField.GetInvocationList().InvokeEventGUIThreadSafe(thia, eventArgs);
                </code>
            </example>
        </member>
        <member name="T:ManagedUPnP.ServiceInstanceDiedEventArgs">
            <summary>
            The event arguments for when a service instance dies.
            </summary>
        </member>
        <member name="T:ManagedUPnP.DeviceRemovedEventHandler">
            <summary>
            Event handler for when a new device is removed.
            </summary>
            <param name="sender">The sender of the events.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ManagedUPnP.Devices">
            <summary>
            Encapsulates a list of devices.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Devices.#ctor(UPNPLib.IUPnPDevice,System.Guid,System.Boolean)">
            <summary>
            Creates a new list of devices from a devices child devices.
            </summary>
            <param name="device">The device to add the children for.</param>
            <param name="interfaceGuid">The network interface Guid of the device or Guid.Empty if unknown.</param>
            <param name="includingChildDevices">True to recursively get all devices or false to get immediate devices.</param>
        </member>
        <member name="M:ManagedUPnP.Devices.#ctor(UPNPLib.IUPnPDevices,System.Guid)">
            <summary>
            Creates a new list of devices from a native devices list.
            </summary>
            <param name="devices">The native devices to add to the list.</param>
            <param name="interfaceGuid">The network interface Guid for the devices or Guid.Empty is unknown.</param>
        </member>
        <member name="M:ManagedUPnP.Devices.#ctor">
            <summary>
            Creates an empty list of devices.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Devices.#ctor(ManagedUPnP.Device,System.Boolean)">
            <summary>
            Creates a new list of devices from a devices child devices.
            </summary>
            <param name="device">The device to add the children for.</param>
            <param name="includingChildDevices">True to recursively get all devices or false to get immediate devices.</param>
        </member>
        <member name="M:ManagedUPnP.Devices.AddFrom(UPNPLib.IUPnPDevice,System.Guid,System.Boolean)">
            <summary>
            Adds devices from a devices child devices.
            </summary>
            <param name="device">The device to add the children for.</param>
            <param name="interfaceGuid">The network interface Guid of the device or Guid.Empty if unknown.</param>
            <param name="includingChildDevices">True to recursively get all devices or false to get immediate devices.</param>
        </member>
        <member name="M:ManagedUPnP.Devices.AddFrom(ManagedUPnP.Device,System.Boolean)">
            <summary>
            Adds devices from a devices child devices.
            </summary>
            <param name="device">The device to add the children for.</param>
            <param name="includingChildDevices">True to recursively get all devices or false to get immediate devices.</param>
        </member>
        <member name="M:ManagedUPnP.Devices.FindServices(System.String,System.Boolean)">
            <summary>
            Finds services within this devices list by service type.
            </summary>
            <param name="serviceType">The service type to get.</param>
            <param name="recursive">True to search recursively in device children.</param>
            <returns>A new Services object.</returns>
        </member>
        <member name="M:ManagedUPnP.Devices.AddDevicesByType(System.String,System.Collections.IList,System.Boolean)">
            <summary>
            Adds devices by Type for this list.
            </summary>
            <param name="type">The Type for the devices to get.</param>
            <param name="list">The list to add the devices to.</param>
            <param name="recursive">True to search recursively.</param>
            <returns>The Devices that matched the type.</returns>
        </member>
        <member name="M:ManagedUPnP.Devices.DevicesByType(System.String,System.Boolean)">
            <summary>
            Gets the devices by Type for this list recusively.
            </summary>
            <param name="type">The Type for the devices to get.</param>
            <param name="recursive">True to search recursively.</param>
            <returns>The Devices that matched the type.</returns>
        </member>
        <member name="M:ManagedUPnP.Devices.AddDevicesByModelName(System.String,System.Collections.IList,System.Boolean)">
            <summary>
            Adds devices by ModelName for this list.
            </summary>
            <param name="modelName">The ModelName for the devices to get.</param>
            <param name="list">The list to add the devices to.</param>
            <param name="recursive">True to search recursively.</param>
            <returns>The Devices that matched the modelName.</returns>
        </member>
        <member name="M:ManagedUPnP.Devices.DevicesByModelName(System.String,System.Boolean)">
            <summary>
            Gets the devices by ModelName for this list recusively.
            </summary>
            <param name="modelName">The ModelName for the devices to get.</param>
            <param name="recursive">True to search recursively.</param>
            <returns>The Devices that matched the modelName.</returns>
        </member>
        <member name="P:ManagedUPnP.Devices.Item(System.String)">
            <summary>
            Gets the device by UDN for this list recusively.
            </summary>
            <param name="udn">The UDN for the device to get.</param>
            <returns>The Device if UDN is found or null if not.</returns>
        </member>
        <member name="T:ManagedUPnP.StateVariableChangedEventArgs">
            <summary>
            Encapsulates the event arguments for when an evented state variable.
            </summary>
        </member>
        <member name="M:ManagedUPnP.StateVariableChangedEventArgs.#ctor(System.String,System.Object)">
            <summary>
            Creates a new state variable changed event arguments.
            </summary>
            <param name="stateVarName">The state variable name.</param>
            <param name="stateVarValue">The state variable value.</param>
        </member>
        <member name="T:ManagedUPnP.ServiceAddedEventHandler">
            <summary>
            Event handler for when a new service is added.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ManagedUPnP.Descriptions.StateVariableDataTypeExtensions">
            <summary>
            Provides extension methods for the data enumeration.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDataTypeExtensions.Info(ManagedUPnP.Descriptions.StateVariableDataType)">
            <summary>
            Gets the data type info attribute for a data type.
            </summary>
            <param name="dataType">The data type to get the attribute for.</param>
            <returns>The attribute or null if not available.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDataTypeExtensions.ForTypeName(ManagedUPnP.Descriptions.StateVariableDataType,System.String)">
            <summary>
            Gets the data type for a UPnP XML type name.
            </summary>
            <param name="dataType">The data type (any, not used).</param>
            <param name="name">The name of the data type.</param>
            <returns>The data type matching the name of DataType.tunknown if not recognised.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDataTypeExtensions.XMLName(ManagedUPnP.Descriptions.StateVariableDataType)">
            <summary>
            Gets the UPnP XML name for a data type.
            </summary>
            <param name="dataType">The data type.</param>
            <returns>The UPnP XML name.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDataTypeExtensions.Description(ManagedUPnP.Descriptions.StateVariableDataType)">
            <summary>
            Gets the description for a data type.
            </summary>
            <param name="dataType">The data type.</param>
            <returns>The data type description or null if invalid.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDataTypeExtensions.BaseType(ManagedUPnP.Descriptions.StateVariableDataType)">
            <summary>
            Gets the managed base type for a data type.
            </summary>
            <param name="dataType">The data type.</param>
            <returns>The managed base type or null if invalid.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDataTypeExtensions.Default(ManagedUPnP.Descriptions.StateVariableDataType)">
            <summary>
            Gets the default value for a data type.
            </summary>
            <param name="dataType">The data type.</param>
            <returns>The default value or null if invalid.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDataTypeExtensions.StringFromValue(ManagedUPnP.Descriptions.StateVariableDataType,System.Object)">
            <summary>
            Converts a data type value to a string.
            </summary>
            <param name="dataType">The data type to convert from.</param>
            <param name="value">The value to convert.</param>
            <returns>The string representation of the value or null if invalid.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.StateVariableDataTypeExtensions.ValueFromString(ManagedUPnP.Descriptions.StateVariableDataType,System.String)">
            <summary>
            Converts a string to a data type value.
            </summary>
            <param name="dataType">The data type to convert to.</param>
            <param name="value">The string value to convert.</param>
            <returns>The object value from the string or null if invalid.</returns>
        </member>
        <member name="T:ManagedUPnP.CodeGen.ServiceExtensions">
            <summary>
            Provides extensions methods for the Device
            class pertaining to code generation.
            </summary>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ServiceExtensions.DefaultCodeGenClassName(ManagedUPnP.Service,ManagedUPnP.CodeGen.ICodeGenProvider)">
            <summary>
            Gets the default code generation class name for a service.
            </summary>
            <param name="service">The service to get the class name for.</param>
            <param name="codeGenProvider">The code generation provider to use.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ServiceExtensions.GenerateClassFor(ManagedUPnP.Service,ManagedUPnP.CodeGen.ICodeGenProvider,System.String,System.String,ManagedUPnP.CodeGen.ClassScope,System.Boolean,System.Boolean)">
            <summary>
            Generates the class code for a service.
            </summary>
            <param name="service">The service to generate for.</param>
            <param name="codeGenProvider">The code generator provider to use.</param>
            <param name="className">The class name of the service or null to use the service type.</param>
            <param name="namespaceName">The namespace for the class.</param>
            <param name="classScope">The scope for the class.</param>
            <param name="partial">True to make the class partial, false otherwise.</param>
            <param name="testStateVars">
            True to test each state variable to ensure it is 
            usuable for accessing as property, false to include
            all state variables as properties.</param>
            <returns>The string representing the code for the class.</returns>
        </member>
        <member name="T:ManagedUPnP.Discovery">
            <summary>
            Encapsulates the ability to discover devices and services.
            </summary>
            <remarks>
            Create an instance of the discovery class for asynchronous
            discoveries. Or use the static methods for synchronous 
            discoveries or quick asynchronous discoveries.
            </remarks>
            <example>
                Asynchronous discovery using an instance of the Discovery class.
                <code>
                   Discovery mdDiscovery;
            
                   public void DiscoveryExample()
                   {
                        mdDiscovery = new Discovery(null);
                        ldDiscovery.DeviceAdded += new DeviceAddedEventHandler(mdDiscovery_DeviceAdded);
                        ldDiscovery.DeviceRemoved += new DeviceRemovedEventHandler(mdDiscovery_DeviceRemoved);
                        ldDiscovery.SearchComplete += new SearchCompleteEventHandler(mdDiscovery_SearchComplete);
            
                        ldDiscovery.Start();
                    }
            
                    void mdDiscovery_SearchComplete(object sender, SearchCompleteEventArgs e)
                    {
                        // NOTE: Event handler is not running in GUI thread
                        Console.WriteLine("Initial Search complete, scanning for new devices.");
                    }
            
                    void mdDiscovery_DeviceRemoved(object sender, DeviceRemovedEventArgs e)
                    {
                        // NOTE: Event handler is not running in GUI thread
                        Console.WriteLine(string.Format("Device Removed: {0}", e.UDN));
                    }
            
                    void mdDiscovery_DeviceAdded(object sender, DeviceAddedEventArgs e)
                    {
                        // NOTE: Event handler is not running in GUI thread
                        Console.WriteLine(string.Format("Device Added: {0}", e.Device.ToString()));
                    }
                </code>
                
                Synchronous discovery by UDN using the static methods:
                <code>
                    public void DiscoveryExample()
                    {
                        // Discovery by Unique Device Name
                        Device ldDevice = FindDeviceByUDN("uuid:abcdefab-abcd-abcd-abcd-abcdefabcdef")
                        
                        if (ldDevice != null)
                            Console.WriteLine(string.Format("Device Found by UDN: {0}", ldDevice.FriendlyName));
                    }
                </code>
            </example>
        </member>
        <member name="F:ManagedUPnP.Discovery.csAllDevices">
            <summary>
            All Devices search URI.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Discovery.mdfcCallback">
            <summary>
            The callback for raising the events.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Discovery.mfFinder">
            <summary>
            The finder being used to discover devices.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Discovery.mafAddressFamily">
            <summary>
            The address family of the interfaces to search in. (Vista and above only)
            </summary>
        </member>
        <member name="F:ManagedUPnP.Discovery.msSearchURI">
            <summary>
            The base device type URI string for searching.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Discovery.miFindHandle">
            <summary>
            The current find handle if searching or 0 if none.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Discovery.mbResolveNetworkInterface">
            <summary>
            True to resolve network interface GUIDs.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Discovery.FindNativeDeviceByUDN(System.String,ManagedUPnP.AddressFamilyFlags)">
            <summary>
            Finds a native device by UDN.
            </summary>
            <param name="udn">The UDN for the device.</param>
            <param name="addressFamily">The address family to search in. (Vista or above only).</param>
            <returns>The device if one is found or null if not found.</returns>
        </member>
        <member name="M:ManagedUPnP.Discovery.FindNativeDevices(System.String,ManagedUPnP.AddressFamilyFlags)">
            <summary>
            Finds native devices by device or service type.
            </summary>
            <param name="deviceOrServiceType">The partial or full device or service type to search for.</param>
            <param name="addressFamily">The address family to search in. (Vista or above only).</param>
            <returns>A UPnP Devices collection containing the found devices.</returns>
        </member>
        <member name="M:ManagedUPnP.Discovery.FindDeviceByUDN(System.String,ManagedUPnP.AddressFamilyFlags)">
            <summary>
            Finds a device by UDN synchronously.
            </summary>
            <param name="udn">The UDN for the device (cannot be null or empty).</param>
            <param name="addressFamily">The address family to search in. (Vista or above only).</param>
            <returns>The device if one is found or null if not found.</returns>
            <exception cref="T:System.ArgumentException">Thrown when udn is null or empty.</exception>
        </member>
        <member name="M:ManagedUPnP.Discovery.FindDevicesAsync(System.String,System.Int32,System.Int32,ManagedUPnP.Discovery.DevicesFoundDelegate,ManagedUPnP.AddressFamilyFlags,System.Boolean)">
            <summary>
            Finds devices by device or service type asynchronously using a timeout period.
            </summary>
            <param name="uriString">The URI string to search for or null for all devices.</param>
            <param name="timeoutMS">The maximum timeout time in milliseconds to wait.</param>
            <param name="maxDevices">The maximum number of devices to find before returning.</param>
            <param name="devicesFound">
            The delegate to call when async operation is complete. <para/> NOTE: this delegate is executed
            in a different to the calling thread.</param>
            <param name="addressFamily">The address family to search in. (Vista or above only).</param>
            <param name="resolveNetworkInterfaces">True to resolve network interface Guids.</param>
            <returns>A Devices list containing the found devices.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when devicesFound delegate is null.</exception>
        </member>
        <member name="M:ManagedUPnP.Discovery.FindServicesAsync(System.String,System.Int32,System.Int32,ManagedUPnP.Discovery.ServicesFoundDelegate,ManagedUPnP.AddressFamilyFlags,System.Boolean)">
            <summary>
            Finds services by service type asynchronously using a timeout period.
            </summary>
            <param name="serviceType">The service type to search for or null for all.</param>
            <param name="timeoutMS">The maximum timeout time in milliseconds to wait.</param>
            <param name="maxDevices">The maximum number of devices to find before returning.</param>
            <param name="servicesFound">
            The delegate to call when async operation is complete.<para />NOTE: this delegate is executed
            in a different to the calling thread.</param>
            <param name="addressFamily">The address family to search in. (Vista or above only).</param>
            <param name="resolveNetworkInterfaces">True to resolve network interface Guids.</param>
            <returns>A Devices list containing the found devices.</returns>
        </member>
        <member name="M:ManagedUPnP.Discovery.FindServices(ManagedUPnP.AddressFamilyFlags,System.Boolean)">
            <summary>
            Finds all services synchronously.
            </summary>
            <param name="addressFamily">The address family to search in. (Vista or above only).</param>
            <param name="resolveNetworkInterfaces">True to resolve network interface Guids.</param>
            <returns>A Services list containing the found services.</returns>
        </member>
        <member name="M:ManagedUPnP.Discovery.FindServices(System.String,System.Int32,System.Int32,System.Boolean@,ManagedUPnP.AddressFamilyFlags,System.Boolean)">
            <summary>
            Finds services by service type synchronously using a timeout period.
            </summary>
            <param name="serviceType">The service type to search for or null for all.</param>
            <param name="timeoutMS">The maximum timeout time in milliseconds to wait.</param>
            <param name="maxDevices">The maximum number of devices to find before returning.</param>
            <param name="searchCompleted">True if the search completed and all available devices were returned.</param>
            <param name="addressFamily">The address family to search in. (Vista or above only).</param>
            <param name="resolveNetworkInterfaces">True to resolve network interface Guids.</param>
            <returns>A Services list containing the found services.</returns>
        </member>
        <member name="M:ManagedUPnP.Discovery.FindDevices(System.String,System.Int32,System.Int32,System.Boolean@,ManagedUPnP.AddressFamilyFlags,System.Boolean)">
            <summary>
            Finds devices by device or service type synchronously using a timeout period.
            </summary>
            <param name="uriString">The URI string to search for or null / empty for all.</param>
            <param name="timeoutMS">The maximum timeout time in milliseconds to wait or -1 for wait forever.</param>
            <param name="maxDevices">The maximum number of devices to find before returning or 0 for as many as possible.</param>
            <param name="searchCompleted">True if the search completed and all available devices were returned.</param>
            <param name="addressFamily">The address family to search in. (Vista or above only).</param>
            <param name="resolveNetworkInterfaces">True to resolve network interface Guids.</param>
            <returns>A Devices list containing the found devices.</returns>
        </member>
        <member name="M:ManagedUPnP.Discovery.FindDevices(System.String,ManagedUPnP.AddressFamilyFlags)">
            <summary>
            Finds devices by URI synchronously waiting for the entire search to complete.
            </summary>
            <param name="deviceOrServiceType">The partial or full device or service type to search for (cannot be null or empty).</param>
            <param name="addressFamily">The address family to search in. (Vista or above only).</param>
            <returns>A Devices list containing the found devices.</returns>
            <exception cref="T:System.ArgumentException">Thrown when deviceOrServiceType is null or empty.</exception>
        </member>
        <member name="M:ManagedUPnP.Discovery.FindServices(System.String)">
            <summary>
            Finds services by URI synchronously waiting for the entire search to complete.
            </summary>
            <param name="serviceType">The partial or full service type to search for (cannot be null or empty).</param>
            <returns>A list of services containing the found services.</returns>
            <exception cref="T:System.ArgumentException">Thrown when serviceType is null or empty.</exception>
        </member>
        <member name="M:ManagedUPnP.Discovery.FindServicesByUDN(System.String,System.String,ManagedUPnP.AddressFamilyFlags)">
            <summary>
            Finds all (recursively) services of a certain type for a specific device by udn.
            </summary>
            <param name="udn">The udn of the device to search for services in (cannot be null or empty).</param>
            <param name="serviceType">The partial or full service type of the service.</param>
            <param name="addressFamily">The address family to search in. (Vista or above only).</param>
            <returns>A list of services containing the found services on the device.</returns>
            <exception cref="T:System.ArgumentException">Thrown when udn is null or empty.</exception>
        </member>
        <member name="M:ManagedUPnP.Discovery.#ctor(System.String,ManagedUPnP.AddressFamilyFlags,System.Boolean)">
            <summary>
            Creates a new discovery class.
            </summary>
            <param name="searchURI">
            The URI string to filter deviecs by or null / empty for all. 
            Gets or sets the Search URI to filter devices by. 
            A search uri can be a Device.Type, Device.UDN, or Service.ServiceTypeIdentifier in the form
            of urn:schemas-upnp-org:deviceTypeName:deviceTypeVersion, uuid:00000000-0000-0000-0000-000000000000, or
            urn:schemas-upnp-org:service:serviceTypeName:serviceTypeVersion.
            </param>
            <param name="addressFamily">The address family of the interfaces to search in (Vista and above only).</param>
            <param name="resolveNetworkInterfaces">True to resolve network interface Guids.</param>
        </member>
        <member name="M:ManagedUPnP.Discovery.OnDeviceAdded(ManagedUPnP.DeviceAddedEventArgs)">
            <summary>
            Raises the DeviceAdded event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.Discovery.OnDeviceRemoved(ManagedUPnP.DeviceRemovedEventArgs)">
            <summary>
            Raises the DeviceRemoved event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.Discovery.OnSearchComplete(ManagedUPnP.SearchCompleteEventArgs)">
            <summary>
            Raises the search complete event.
            </summary>
            <param name="e">The event argument.</param>
        </member>
        <member name="M:ManagedUPnP.Discovery.Start">
            <summary>
            Starts an asynchronous search using current parameters if one isnt already in progress.
            </summary>
            <returns>True if a new asynchronous search was started, false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Discovery.Stop">
            <summary>
            Stops the current asynchronous search.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Discovery.Finalize">
            <summary>
            Finalisation for disposal.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Discovery.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Discovery.Dispose(System.Boolean)">
            <summary>
            Internal dispose method.
            </summary>
            <param name="disposeManaged">True to dispose managed objects.</param>
        </member>
        <member name="E:ManagedUPnP.Discovery.DeviceAdded">
            <summary>
            Occurs when a new device is discoverred.
            </summary>
        </member>
        <member name="E:ManagedUPnP.Discovery.DeviceRemoved">
            <summary>
            Occrs when a device is removed.
            </summary>
        </member>
        <member name="E:ManagedUPnP.Discovery.SearchComplete">
            <summary>
            Occurs when a search has completed its initial phase.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Discovery.ResolveNetworkInterface">
            <summary>
            Gets whether to resolve the network interface Gui for the devices.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Discovery.AddressFamily">
            <summary>
            Gets the address family to search in (Vista or above only).
            </summary>
        </member>
        <member name="P:ManagedUPnP.Discovery.SearchURI">
            <summary>
            Gets the search URI to search for.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Discovery.Searching">
            <summary>
            Gets whether this object is currently searching.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Discovery.DevicesFoundDelegate">
            <summary>
            Called when a synchronous device find operation completes its initial search.
            </summary>
            <param name="devices">The devices that were found.</param>
            <param name="searchCompleted">True if the search completed and all available devices were returned.</param>
        </member>
        <member name="T:ManagedUPnP.Discovery.ServicesFoundDelegate">
            <summary>
            Called when a synchronous service find operation completes its initial search.
            </summary>
            <param name="services">The services that were found.</param>
            <param name="searchCompleted">True if the search completed and all available services were returned.</param>
        </member>
        <member name="T:ManagedUPnP.Discovery.DeviceFinderCallback">
            <summary>
            Implements the IUPnPDeviceFinderCallback interface and
            raises events in the owned discovery class.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Discovery.DeviceFinderCallback.mdDiscovery">
            <summary>
            The discovery class linked to this callback, or null if
            the discovery class no longer wants the events raised.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Discovery.DeviceFinderCallback.#ctor(ManagedUPnP.Discovery)">
            <summary>
            Creates a new device finder callback object.
            </summary>
            <param name="discovery">The discovery object for which the events should be raised.</param>
        </member>
        <member name="M:ManagedUPnP.Discovery.DeviceFinderCallback.Ignore">
            <summary>
            Ignores all events from this point forward.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Discovery.DeviceFinderCallback.UPNPLib#IUPnPDeviceFinderCallback#DeviceAdded(System.Int32,UPNPLib.UPnPDevice)">
            <summary>
            Called when a new device is discovered.
            </summary>
            <param name="findData">The search for which the UPnP framework is returning results.</param>
            <param name="device">The new device which was added.</param>
        </member>
        <member name="M:ManagedUPnP.Discovery.DeviceFinderCallback.UPNPLib#IUPnPDeviceFinderCallback#DeviceRemoved(System.Int32,System.String)">
            <summary>
            Called when a device is removed.
            </summary>
            <param name="findData">The search for which the UPnP framework is returning results.</param>
            <param name="udn">The unique device name for the device that was removed.</param>
        </member>
        <member name="M:ManagedUPnP.Discovery.DeviceFinderCallback.UPNPLib#IUPnPDeviceFinderCallback#SearchComplete(System.Int32)">
            <summary>
            Called when the initial search is complete.
            </summary>
            <param name="findData">The search for which the UPnP framework is returning results.</param>
        </member>
        <member name="P:ManagedUPnP.Discovery.DeviceFinderCallback.Discovery">
            <summary>
            Gets the discovery object linked to this callback object.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Discovery.DeviceFinderCallbackWithInterface">
            <summary>
            Implements the IUPnPDeviceFinderCallbackWithInterface interface and
            raises events in the owned discovery class.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Discovery.DeviceFinderCallbackWithInterface.UPNPLib#IUPnPDeviceFinderAddCallbackWithInterface#DeviceAddedWithInterface(System.Int32,UPNPLib.UPnPDevice,System.Guid@)">
            <summary>
            Called when a new device is discovered.
            </summary>
            <param name="findData">The search for which the UPnP framework is returning results.</param>
            <param name="device">The new device which was added.</param>
            <param name="guidInterface">The network interface Guid from which the device came.</param>
        </member>
        <member name="T:ManagedUPnP.Descriptions.ServiceExtensions">
            <summary>
            Encapsulates extension methods for the service class relating to descriptions.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ServiceExtensions.Description(ManagedUPnP.Service,System.Boolean)">
            <summary>
            Gets the description for this service from a root description.
            </summary>
            <param name="service">The service to get the service description for.</param>
            <param name="useCache">True to use cached version, false otherwise.</param>
            <returns>A ServiceDescription.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ServiceExtensions.DeviceServiceDescription(ManagedUPnP.Service,ManagedUPnP.Descriptions.RootDescription)">
            <summary>
            Gets the device service description from a root description.
            </summary>
            <param name="service">The service to get the device service description for.</param>
            <param name="rootDescription">The root description for the service.</param>
            <returns>A DeviceServiceDescription.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ServiceExtensions.DeviceServiceDescription(ManagedUPnP.Service,System.Boolean)">
            <summary>
            Gets the device service description for a service.
            </summary>
            <param name="service">The service to get the device service description for.</param>
            <param name="useCache">True to use caching for the root description or false otherwise.</param>
            <returns>A DeviceServiceDescription.</returns>
        </member>
        <member name="T:ManagedUPnP.CodeGen.ClassScope">
            <summary>
            Specifies the class scope for code generation.
            </summary>
        </member>
        <member name="F:ManagedUPnP.CodeGen.ClassScope.Private">
            <summary>
            Private class scope.
            </summary>
        </member>
        <member name="F:ManagedUPnP.CodeGen.ClassScope.Public">
            <summary>
            Public class scope.
            </summary>
        </member>
        <member name="F:ManagedUPnP.CodeGen.ClassScope.Internal">
            <summary>
            Internal class scope.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Logging">
            <summary>
            Provides a simple static class to
            enable logging for debugging purposes.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Logging.mbEnabled">
            <summary>
            True if the logging is enabled.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Logging.miIndent">
            <summary>
            The current indent for the logging text.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Logging.OnLogLines(System.Object,ManagedUPnP.LogLinesEventArgs)">
            <summary>
            Calls the LogLines event handler.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.Logging.Log(System.Object,System.String,System.Int32)">
            <summary>
            Appends lines to the log.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="lines">The lines for the log (separated by \r\n).</param>
            <param name="indent">The indent of the log lines.</param>
        </member>
        <member name="E:ManagedUPnP.Logging.LogLines">
            <summary>
            Occurs when log lines are appended to the log.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Logging.Enabled">
            <summary>
            Gets or sets whether logging is enabled.
            </summary>
        </member>
        <member name="T:ManagedUPnP.ServiceAddedEventArgs">
            <summary>
            The arguments for the device added event.
            </summary>
        </member>
        <member name="F:ManagedUPnP.ServiceAddedEventArgs.mdCOMDevice">
            <summary>
            The native com device for the service added.
            </summary>
        </member>
        <member name="F:ManagedUPnP.ServiceAddedEventArgs.msCOMService">
            <summary>
            The native com service for the service added.
            </summary>
        </member>
        <member name="F:ManagedUPnP.ServiceAddedEventArgs.msService">
            <summary>
            The service added.
            </summary>
        </member>
        <member name="F:ManagedUPnP.ServiceAddedEventArgs.mgInterfaceGuid">
            <summary>
            The network interface Guid for the device.
            </summary>
        </member>
        <member name="F:ManagedUPnP.ServiceAddedEventArgs.mbInterfaceGuidAvailable">
            <summary>
            True if the network interface Guid is available.
            </summary>
        </member>
        <member name="M:ManagedUPnP.ServiceAddedEventArgs.#ctor(UPNPLib.IUPnPDevice,UPNPLib.IUPnPService)">
            <summary>
            Creates a new service added event arguments.
            </summary>
            <param name="device">The underlying COM device that was added.</param>
            <param name="service">The underlying COM service that was added.</param>
        </member>
        <member name="M:ManagedUPnP.ServiceAddedEventArgs.#ctor(ManagedUPnP.DeviceAddedEventArgs,UPNPLib.IUPnPService)">
            <summary>
            Creates a new service added event arguments.
            </summary>
            <param name="deviceArgs">The underlying device args from which the service came.</param>
            <param name="service">The underlying COM service that was added.</param>
        </member>
        <member name="M:ManagedUPnP.ServiceAddedEventArgs.#ctor(UPNPLib.IUPnPDevice,System.Guid,UPNPLib.IUPnPService)">
            <summary>
            Creates a new service added event arguments.
            </summary>
            <param name="device">The underlying COM device that was added.</param>
            <param name="interfaceGuid">The network interface guid.</param>
            <param name="service">The service which was added.</param>
        </member>
        <member name="P:ManagedUPnP.ServiceAddedEventArgs.COMDevice">
            <summary>
            The native underlying COM device.
            </summary>
        </member>
        <member name="P:ManagedUPnP.ServiceAddedEventArgs.COMService">
            <summary>
            The native underlying COM service.
            </summary>
        </member>
        <member name="P:ManagedUPnP.ServiceAddedEventArgs.InterfaceGuid">
            <summary>
            Gets the network interface Guid if its available.
            </summary>
        </member>
        <member name="P:ManagedUPnP.ServiceAddedEventArgs.InterfaceGuidAvailable">
            <summary>
            Gets whether the network interface Guid is available.
            </summary>
        </member>
        <member name="P:ManagedUPnP.ServiceAddedEventArgs.Service">
            <summary>
            Gets the service for the service added event arguments.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.FormattedOrderedDescriptionDictionary`2">
            <summary>
            Encapsulates a ordered description dictionary with built in ToString formatting.
            </summary>
            <typeparam name="TKey">The type for the key.</typeparam>
            <typeparam name="TValue">The type for the value.</typeparam>
        </member>
        <member name="T:ManagedUPnP.Descriptions.OrderedDescriptionDictionary`2">
            <summary>
            Encapsulates a description dictionary using a key that preserves its order.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:ManagedUPnP.Descriptions.OrderedDescriptionDictionary`2.mdDictionary">
            <summary>
            The dictionary for the keys and descriptions.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedDescriptionDictionary`2.#ctor(ManagedUPnP.Descriptions.Description)">
            <summary>
            Creates a new description dictionary.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedDescriptionDictionary`2.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates a new description dictionary from a reader.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The XML reader.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedDescriptionDictionary`2.AddItemsFrom(System.Xml.XmlTextReader)">
            <summary>
            Adds the items from an XML reader.
            </summary>
            <param name="reader">The XML reader to read the items from.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedDescriptionDictionary`2.ContainsKey(`0)">
            <summary>
            Returns true if the disctionary contains a key.
            </summary>
            <param name="key">The key to determine existence of.</param>
            <returns>True if the key exists, false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedDescriptionDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">
            When this method returns, contains the value associated with the specified
            key, if the key is found; otherwise, the default value for the type of the
            value parameter. This parameter is passed uninitialized.
            </param>
            <returns>True if the value was set.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedDescriptionDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Returns true if a key value pair exists.
            </summary>
            <param name="item">The item to test for existence.</param>
            <returns>True if the key value pair exists.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedDescriptionDictionary`2.GetEnumerator">
            <summary>
            Gets the key value pair enumerator.
            </summary>
            <returns>The enumerator for the key value pair.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedDescriptionDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the key value pair enumerator.
            </summary>
            <returns>The enumerator for the key value pair.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedDescriptionDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the key value pairs to an array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The array index to start copying to.</param>
        </member>
        <member name="P:ManagedUPnP.Descriptions.OrderedDescriptionDictionary`2.Count">
            <summary>
            Gets the number of items in the dictionary.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.OrderedDescriptionDictionary`2.Keys">
            <summary>
            Gets the keys in the dictionary.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.OrderedDescriptionDictionary`2.Values">
            <summary>
            Gets the values in the dictionary.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.OrderedDescriptionDictionary`2.Item(`0)">
            <summary>
            Gets the value for a dictionary key.
            </summary>
            <param name="key">The key to get the value for.</param>
            <returns>The value for the key.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.OrderedDescriptionDictionary`2.Item(System.Int32)">
            <summary>
            Gets the value for an index.
            </summary>
            <param name="index">The index to get the value for.</param>
            <returns>The value for the index.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.FormattedOrderedDescriptionDictionary`2.#ctor(ManagedUPnP.Descriptions.Description)">
            <summary>
            Creates a new formatted description dictionary.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.FormattedOrderedDescriptionDictionary`2.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates a new formatted description dictionary from a reader.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The XML reader.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.FormattedOrderedDescriptionDictionary`2.ToString(System.Int32)">
            <summary>
            Converts the description to a string.
            </summary>
            <param name="indent">The indent for the string.</param>
            <returns>The string representation for the description.</returns>
        </member>
        <member name="T:ManagedUPnP.Descriptions.IconsDescription">
            <summary>
            Encapsulates a list of icon descriptions.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.FormattedDescriptionList`1">
            <summary>
            Encapsulates a description list with built in ToString formatting.
            </summary>
            <typeparam name="T">The stored list value type.</typeparam>
        </member>
        <member name="M:ManagedUPnP.Descriptions.FormattedDescriptionList`1.#ctor(ManagedUPnP.Descriptions.Description)">
            <summary>
            Creates a new formatted description list.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.FormattedDescriptionList`1.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates a new formatted description list from a reader.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The XML reader.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.FormattedDescriptionList`1.ToString(System.Int32)">
            <summary>
            Converts the description to a string.
            </summary>
            <param name="indent">The indent for the string.</param>
            <returns>The string representation for the description.</returns>
        </member>
        <member name="F:ManagedUPnP.Descriptions.IconsDescription.msElement">
            <summary>
            The element name for an icon.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.IconsDescription.IsStartNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.IconsDescription.IsEndNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.IconsDescription.#ctor(ManagedUPnP.Descriptions.Description)">
            <summary>
            Creates a new empty icons list description.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.IconsDescription.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates a new icons list description from an XML reader.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The XML reader object.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.IconsDescription.IsStartNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.IconsDescription.IsEndNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.IconsDescription.UseNode(System.Xml.XmlTextReader,System.String)">
            <summary>
            Uses an XML node for this description.
            </summary>
            <param name="reader">The XML reader to use the node from.</param>
            <param name="lastNodeName">The last node name.</param>
            <returns>True if the node was processed false otherwise.</returns>
        </member>
        <member name="T:ManagedUPnP.LogLinesEventHandler">
            <summary>
            The delegate for the LogLinesEventHandler.
            </summary>
            <param name="sender">The sender of the log event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ManagedUPnP.LogLinesEventArgs">
            <summary>
            Encapsulates the event arguments for the logging of lines.
            </summary>
        </member>
        <member name="F:ManagedUPnP.LogLinesEventArgs.msLines">
            <summary>
            The lines to add to the log separated by \r\n.
            </summary>
        </member>
        <member name="F:ManagedUPnP.LogLinesEventArgs.miIndent">
            <summary>
            The indent of the lines in the log.
            </summary>
        </member>
        <member name="M:ManagedUPnP.LogLinesEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new LogLinesEventArgs object.
            </summary>
            <param name="lines">The lines to add to the log separated by \r\n.</param>
            <param name="indent">The indent of the lines in the log.</param>
        </member>
        <member name="P:ManagedUPnP.LogLinesEventArgs.Lines">
            <summary>
            Gets the lines to add to the log separated by \r\n.
            </summary>
        </member>
        <member name="P:ManagedUPnP.LogLinesEventArgs.Indent">
            <summary>
            Gets the indent of the lines in the log.
            </summary>
        </member>
        <member name="T:ManagedUPnP.DeviceAddedEventHandler">
            <summary>
            Event handler for when a new device is added.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ManagedUPnP.Descriptions.AllowedValuesDescription">
            <summary>
            Encapsulates the description for a list of allowed values.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.AllowedValuesDescription.msElement">
            <summary>
            Gets the element name for the allowed value list description.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.AllowedValuesDescription.IsStartNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.AllowedValuesDescription.IsEndNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.AllowedValuesDescription.#ctor(ManagedUPnP.Descriptions.Description)">
            <summary>
            Creates a new allowed values description.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.AllowedValuesDescription.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates a new allowed values description from a reader.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The XML reader to get the values from.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.AllowedValuesDescription.UseNode(System.Xml.XmlTextReader,System.String)">
            <summary>
            Uses an XML node for this description.
            </summary>
            <param name="reader">The XML reader to use the node from.</param>
            <param name="lastNodeName">The last node name.</param>
            <returns>True if the node was processed false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.AllowedValuesDescription.IsEndNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.AllowedValuesDescription.IsStartNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.AllowedValuesDescription.ToString(System.Int32)">
            <summary>
            Converts the description to a string.
            </summary>
            <param name="indent">The indent for the string.</param>
            <returns>The string representation for the description.</returns>
        </member>
        <member name="T:ManagedUPnP.Descriptions.AllowedValueRangeDescription">
            <summary>
            Encapsulates a description for a list of actions.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.AllowedValueRangeDescription.msElement">
            <summary>
            Gets the element name for the allowed value range description.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.AllowedValueRangeDescription.IsStartNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.AllowedValueRangeDescription.IsEndNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.AllowedValueRangeDescription.#ctor(ManagedUPnP.Descriptions.Description)">
            <summary>
            Creates a new allowed value range description.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.AllowedValueRangeDescription.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates a new allowed value range description from a reader.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The XML reader to get the information from.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.AllowedValueRangeDescription.IsEndNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.AllowedValueRangeDescription.IsStartNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.AllowedValueRangeDescription.ToString(System.Int32)">
            <summary>
            Converts the description to a string.
            </summary>
            <param name="indent">The indent for the string.</param>
            <returns>The string representation for the description.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.AllowedValueRangeDescription.Minimum">
            <summary>
            Gets the minimum allowed value for this value range.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.AllowedValueRangeDescription.Maximum">
            <summary>
            Gets the maximum allowed value for this value range.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.AllowedValueRangeDescription.Step">
            <summary>
            Gets the allowed stepping value for this value range.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.AllowedValueRangeDescription.Empty">
            <summary>
            Returns true if this allowed stepping range is empty.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.NamespaceDoc">
            <summary>
            The ManagedUPnP.Descriptions namespace contains classes for
            generating a hierarchical object structure from a Device or Service
            XML description document. The object structure enables the program
            to easily traverse the information contained within a description document.
            </summary>
            <example>
                <code>
                    // ldDevice is a pre discovered ManagedUPnP.Device
                    RootDescription lrdDescription = ldDevice.RootDeviceDescription();
                    DeviceDescription ldDescription = ldDevice.DeviceDescription(lrdDescription).
                </code>
            </example>
        </member>
        <member name="T:ManagedUPnP.IUPnPDevicesExtensions">
            <summary>
            Extends the IUPnPDevices interface.
            </summary>
        </member>
        <member name="M:ManagedUPnP.IUPnPDevicesExtensions.ReadableInfo(UPNPLib.IUPnPDevices,System.Int32)">
            <summary>
            Gets the readable info for a devices list.
            </summary>
            <param name="devices">The list of devices to get the readable info for.</param>
            <param name="indent">The indent for the readable info.</param>
            <returns>The readable info for the devices.</returns>
        </member>
        <member name="M:ManagedUPnP.IUPnPDevicesExtensions.FindServices(UPNPLib.IUPnPDevices,System.String)">
            <summary>
            Gets all the services for a list of devices.
            </summary>
            <param name="devices">The list of devices to find the services for.</param>
            <param name="serviceType">The type of services to search for.</param>
            <returns>The list of services found.</returns>
        </member>
        <member name="T:ManagedUPnP.Globals">
            <summary>
            Encapsulates static global settings for the
            ManagedUPnP namespace.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Globals.miRequestTimeoutMS">
            <summary>
            Stores the request timeout for description XML documents,
            and Icons from the UPnP enabled devices.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Globals.RequestTimeoutMS">
            <summary>
            Gets or sets the request timeout for description XML documents,
            and Icons from the UPnP enabled devices.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.RootDescriptionCache">
            <summary>
            Encapsulates a cache for the root descriptions of devices.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.RootDescriptionCache.mrdcCache">
            <summary>
            The static root description cache.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.RootDescriptionCache.mdCache">
            <summary>
            The cache dictionary using the UDN as a key.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.RootDescriptionCache.KeyFor(UPNPLib.IUPnPDevice)">
            <summary>
            Gets the key for a device.
            </summary>
            <param name="device">The com native device to get the key for.</param>
            <returns>The key for a device.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.RootDescriptionCache.RemoveCacheFor(UPNPLib.IUPnPDevice)">
            <summary>
            Revmoves the cache for a com native device.
            </summary>
            <param name="device">The device to remove the cache for.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.RootDescriptionCache.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.RootDescriptionCache.RemoveCacheFor(ManagedUPnP.Device)">
            <summary>
            Removes the cache item for a device
            </summary>
            <param name="device">The device to remove the cache for.</param>
        </member>
        <member name="P:ManagedUPnP.Descriptions.RootDescriptionCache.Cache">
            <summary>
            Gets the root description cache.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.RootDescriptionCache.Item(UPNPLib.IUPnPDevice)">
            <summary>
            Gets the root description for a com native device.
            </summary>
            <param name="device">The device to get root description for.</param>
            <returns>The root description for the device.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.RootDescriptionCache.Item(ManagedUPnP.Device)">
            <summary>
            Gets the root description for a device.
            </summary>
            <param name="device">The device to get the root description for.</param>
            <returns>The root description for the device.</returns>
        </member>
        <member name="T:ManagedUPnP.Utils">
            <summary>
            Provides all internal utility functions.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Utils.GetURLStream(System.String)">
            <summary>
            Gets the stream for a URL.
            </summary>
            <param name="url">The URL to get the stream.</param>
            <returns>The stream created.</returns>
        </member>
        <member name="M:ManagedUPnP.Utils.GetXMLTextReader(System.String)">
            <summary>
            Gets an XML Text reader for a URL.
            </summary>
            <param name="url">The URL to get the text reader for.</param>
            <returns>The XMLTextReader created.</returns>
        </member>
        <member name="M:ManagedUPnP.Utils.CombineURL(System.String,System.String)">
            <summary>
            Combines a two URLs.
            </summary>
            <param name="baseURL">The base URL.</param>
            <param name="relURL">The relative URL.</param>
            <returns>A string representing the new URL.</returns>
        </member>
        <member name="T:ManagedUPnP.StringExtensions">
            <summary>
            Extends the string class.
            </summary>
        </member>
        <member name="M:ManagedUPnP.StringExtensions.AsLine(System.String)">
            <summary>
            Appends a line character to the start of a string.
            </summary>
            <param name="value">The value to pre-pend the line end character to.</param>
            <returns>The prepended line.</returns>
        </member>
        <member name="M:ManagedUPnP.StringExtensions.AsInLine(System.String)">
            <summary>
            Removes the end line characters at the end of a string if needed.
            </summary>
            <param name="value">The value to remove the end line characters from.</param>
            <returns>The inline text.</returns>
        </member>
        <member name="M:ManagedUPnP.StringExtensions.LineBefore(System.String)">
            <summary>
            Appends a line character to the start of a string if needed.
            </summary>
            <param name="value">The value to pre-pend the line end character to.</param>
            <returns>The prepended line.</returns>
        </member>
        <member name="T:ManagedUPnP.Descriptions.DeviceServiceDescription">
            <summary>
            Encapsulates a description for a device service.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.DeviceServiceDescription.msElement">
            <summary>
            The element name for a service.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.DeviceServiceDescription.mdDevice">
            <summary>
            The device description for the service.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceServiceDescription.IsStartNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceServiceDescription.IsEndNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceServiceDescription.#ctor(ManagedUPnP.Descriptions.Description,ManagedUPnP.Descriptions.DeviceDescription,System.Xml.XmlTextReader)">
            <summary>
            Creates a new service description.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="device">The device description which owns the service.</param>
            <param name="reader">The XML reader to get the data for the service from.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceServiceDescription.IsStartNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceServiceDescription.IsEndNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceServiceDescription.ProcessURL(ManagedUPnP.Descriptions.RootDescription,System.String)">
            <summary>
            Process a URL, prepending the URL base if needed.
            </summary>
            <param name="root">The root description document.</param>
            <param name="url">The url to process</param>
            <returns>The URL or null if none.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceServiceDescription.URLBase(ManagedUPnP.Descriptions.RootDescription)">
            <summary>
            Gets the base URL for all URLs.
            </summary>
            <param name="root">The root description for the service description.</param>
            <returns>The URL base for all URLs for this service.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceServiceDescription.GetDescription(ManagedUPnP.Descriptions.RootDescription)">
            <summary>
            Gets the service description for this service from the root description.
            </summary>
            <param name="root">The root description to get the service description from.</param>
            <returns>The service description or null if it cannot be located.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceServiceDescription.GetSCPDURL(ManagedUPnP.Descriptions.RootDescription)">
            <summary>
            Gets the absolute URL to the SCPD document.
            </summary>
            <param name="root">The root description.</param>
            <returns>The URL or null if not available.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceServiceDescription.GetControlURL(ManagedUPnP.Descriptions.RootDescription)">
            <summary>
            Gets the absolute URL to the control URL.
            </summary>
            <param name="root">The root description.</param>
            <returns>The URL or null if not available.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceServiceDescription.GetEventSubURL(ManagedUPnP.Descriptions.RootDescription)">
            <summary>
            Gets the absolute URL to the event sub URL.
            </summary>
            <param name="root">The root description.</param>
            <returns>The URL or null if not available.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.DeviceServiceDescription.ToString(System.Int32)">
            <summary>
            Converts the description to a string.
            </summary>
            <param name="indent">The indent for the string.</param>
            <returns>The string representation for the description.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceServiceDescription.Device">
            <summary>
            Gets the device description for this server.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceServiceDescription.ServiceType">
            <summary>
            Gets the type for this service.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceServiceDescription.ServiceId">
            <summary>
            Gets the ID for this service.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceServiceDescription.SCPDURL">
            <summary>
            Gets the URL for the service description.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceServiceDescription.ControlURL">
            <summary>
            Gets the URL for controlling the service.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.DeviceServiceDescription.EventSubURL">
            <summary>
            Gets the event subroutine URL.
            </summary>
        </member>
        <member name="T:ManagedUPnP.AutoEventedDiscoveryServices`1">
            <summary>
            Encapsulates an class which maintaines a list of services
            for a service type and provides events for servicing.
            </summary>
            <remarks>
            The services are automatically removed and added as they become
            available or become dead. This class is thread safe.
            </remarks>
            <typeparam name="T">The type of the auto discovery service</typeparam>
        </member>
        <member name="T:ManagedUPnP.AutoDiscoveryServices`1">
            <summary>
            Encapsulates an abstract class which maintaines a list of services
            for a service type.
            </summary>
            <remarks>
            The services are automatically removed and added as they become
            available or become dead. This class is thread safe.
            </remarks>
            <typeparam name="T">The type of the auto discovery service</typeparam>
        </member>
        <member name="F:ManagedUPnP.AutoDiscoveryServices`1.mdAutoServices">
            <summary>
            The dictionary containing key and services.
            </summary>
        </member>
        <member name="F:ManagedUPnP.AutoDiscoveryServices`1.mafAddressFamily">
            <summary>
            The address families to search.
            </summary>
        </member>
        <member name="F:ManagedUPnP.AutoDiscoveryServices`1.mbResolveNetworkInterfaces">
            <summary>
            True to resolve network interfaces in search.
            </summary>
        </member>
        <member name="F:ManagedUPnP.AutoDiscoveryServices`1.mdDiscovery">
            <summary>
            The discovery object to discover services.
            </summary>
        </member>
        <member name="F:ManagedUPnP.AutoDiscoveryServices`1.msDiscoveryServiceType">
            <summary>
            The service type to discover or String.Empty for for all services.
            </summary>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.#ctor(System.String)">
            <summary>
            Creates a new AutoDiscoveryServices object.
            </summary>
            <param name="discoveryServiceType">The service type to discover or String.Empty for all services.</param>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.OnSearchComplete(System.EventArgs)">
            <summary>
            Raises the SearchCompleteEvent.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.OnAutoServicesChanged(System.EventArgs)">
            <summary>
            Raises the AutoServicesChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.mdDiscovery_SearchComplete(System.Object,ManagedUPnP.SearchCompleteEventArgs)">
            <summary>
            Handles when the discovery object finishes its initial search.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.mdDiscovery_DeviceRemoved(System.Object,ManagedUPnP.DeviceRemovedEventArgs)">
            <summary>
            Handles when the discovery object removes a device.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.mdDiscovery_DeviceAdded(System.Object,ManagedUPnP.DeviceAddedEventArgs)">
            <summary>
            Handles when the discovery object adds a device.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.CanCreateAutoServiceFor(ManagedUPnP.Service)">
            <summary>
            Determines whether a service is compatible with T.
            </summary>
            <param name="service">The service to determine compatibility for.</param>
            <returns>True if the service is compatible false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.CreateAutoServiceFor(ManagedUPnP.Service)">
            <summary>
            Creates a T object for the specified service.
            </summary>
            <param name="service">The service to create T for.</param>
            <returns>The service created or null if unable to create.</returns>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.StatusNotify(ManagedUPnP.AutoDiscoveryServices{`0}.NotifyAction)">
            <summary>
            Notifies of status change with no data.
            </summary>
            <param name="action">The action for the notification.</param>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.StatusNotify(ManagedUPnP.AutoDiscoveryServices{`0}.NotifyAction,System.Object)">
            <summary>
            Notifies of status change with data.
            </summary>
            <param name="action">The action for the notification.</param>
            <param name="data">The data for the action <see cref="T:ManagedUPnP.AutoDiscoveryServices`1.NotifyAction"/>.</param>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.Removed(`0)">
            <summary>
            Notifies that an auto service has been removed.
            </summary>
            <param name="autoService">The auto service removed.</param>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.Added(`0)">
            <summary>
            Notifies that an auto service has been added.
            </summary>
            <param name="autoService">The auto service added.</param>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.Clear">
            <summary>
            Clears the services (stops and starts the async if already running).
            </summary>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.StopAsync">
            <summary>
            Stops the current async search if running.
            </summary>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.ReStartAsync">
            <summary>
            Starts or restarts the current async search.
            </summary>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.AddAllFor(System.String)">
            <summary>
            Adds all services for a device UDN syncrhonously.
            </summary>
            <param name="udn">The UDN of the device to add the services for.</param>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.AddAllFor(ManagedUPnP.Services)">
            <summary>
            Adds all services for a service list synchronously.
            </summary>
            <param name="services">The services to add.</param>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.GetKeyNameDictionary">
            <summary>
            Gets a dictionary containing ServiceKey, ServiceName.
            </summary>
            <returns>The Key, Name dictionary.</returns>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.Finalize">
            <summary>
            Finalisation for disposal.
            </summary>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="M:ManagedUPnP.AutoDiscoveryServices`1.Dispose(System.Boolean)">
            <summary>
            Internal dispose method.
            </summary>
            <param name="disposeManaged">True to dispose managed objects.</param>
        </member>
        <member name="E:ManagedUPnP.AutoDiscoveryServices`1.AutoServicesChanged">
            <summary>
            Event raised when services have changed.
            </summary>
        </member>
        <member name="E:ManagedUPnP.AutoDiscoveryServices`1.SearchComplete">
            <summary>
            Event raised when the initial search is complete.
            </summary>
        </member>
        <member name="P:ManagedUPnP.AutoDiscoveryServices`1.DiscoveryServiceType">
            <summary>
            Gets the discovery service type or String.Empty for all services.
            </summary>
        </member>
        <member name="P:ManagedUPnP.AutoDiscoveryServices`1.AsyncRunning">
            <summary>
            Gets whether the async discovery is running.
            </summary>
        </member>
        <member name="P:ManagedUPnP.AutoDiscoveryServices`1.AutoServices">
            <summary>
            Gets a thread safe snapshot list of auto services currently available.
            </summary>
        </member>
        <member name="P:ManagedUPnP.AutoDiscoveryServices`1.AddressFamily">
            <summary>
            Gets or sets the address familys to search on, this will
            require a restart of the search is one is already under way.
            </summary>
        </member>
        <member name="P:ManagedUPnP.AutoDiscoveryServices`1.ResolveNetworkInterfaces">
            <summary>
            Gets or sets whether to resolve network interfaces, this will
            require a restart of the search is one is already under way 
            (Windows Vista and above only).
            </summary>
        </member>
        <member name="T:ManagedUPnP.AutoDiscoveryServices`1.NotifyAction">
            <summary>
            The various notify actions raised.
            </summary>
            <remarks>
            The brackets in the value summary description show the type / value of the data.
            </remarks>
        </member>
        <member name="F:ManagedUPnP.AutoDiscoveryServices`1.NotifyAction.SearchComplete">
            <summary>
            Search Complete - Async notifications pending (Data = null).
            </summary>
        </member>
        <member name="F:ManagedUPnP.AutoDiscoveryServices`1.NotifyAction.DeviceRemoved">
            <summary>
            Device Removed (Data = <see cref="T:System.String"/>: DeviceUDN).
            </summary>
        </member>
        <member name="F:ManagedUPnP.AutoDiscoveryServices`1.NotifyAction.ServiceRemoved">
            <summary>
            Service Removed for device (Data = <see cref="T:ManagedUPnP.IAutoDiscoveryService"/>: Service removed).
            </summary>
        </member>
        <member name="F:ManagedUPnP.AutoDiscoveryServices`1.NotifyAction.COMDeviceFound">
            <summary>
            COM Device Found (Data = <see cref="T:System.String"/>: COMDevice.ToString()).
            </summary>
        </member>
        <member name="F:ManagedUPnP.AutoDiscoveryServices`1.NotifyAction.DeviceFound">
            <summary>
            Device Found (Data = <see cref="T:ManagedUPnP.Device"/>: Device found).
            </summary>
        </member>
        <member name="F:ManagedUPnP.AutoDiscoveryServices`1.NotifyAction.ServiceFound">
            <summary>
            Service Found (Data = <see cref="T:ManagedUPnP.IAutoDiscoveryService"/>: Service found).
            </summary>
        </member>
        <member name="F:ManagedUPnP.AutoDiscoveryServices`1.NotifyAction.ServiceAccepted">
            <summary>
            Service Accepted (Data = <see cref="T:ManagedUPnP.IAutoDiscoveryService"/>: Service accepted).
            </summary>
        </member>
        <member name="F:ManagedUPnP.AutoDiscoveryServices`1.NotifyAction.ServiceNotAccepted">
            <summary>
            Service Not Accepted (Data = <see cref="T:ManagedUPnP.IAutoDiscoveryService"/>: Service not accepted).
            </summary>
        </member>
        <member name="F:ManagedUPnP.AutoDiscoveryServices`1.NotifyAction.ServiceAlreadyAdded">
            <summary>
            Service Already Added (Data = <see cref="T:ManagedUPnP.IAutoDiscoveryService"/>: Service already added).
            </summary>
        </member>
        <member name="F:ManagedUPnP.AutoDiscoveryServices`1.NotifyAction.ServiceNotCreated">
            <summary>
            Service Not Created (Data = <see cref="T:ManagedUPnP.IAutoDiscoveryService"/>: Service not created).
            </summary>
        </member>
        <member name="F:ManagedUPnP.AutoDiscoveryServices`1.NotifyAction.ServiceAdded">
            <summary>
            Service Added (Data = <see cref="T:ManagedUPnP.IAutoDiscoveryService"/>: Service added")
            </summary>
        </member>
        <member name="M:ManagedUPnP.AutoEventedDiscoveryServices`1.#ctor(System.String)">
            <summary>
            Creates a new AutoDiscoveryServices object.
            </summary>
            <param name="discoveryServiceType">The service type to discover or String.Empty for all services.</param>
        </member>
        <member name="M:ManagedUPnP.AutoEventedDiscoveryServices`1.OnStatusNotifyAction(ManagedUPnP.AutoEventedDiscoveryServices{`0}.StatusNotifyActionEventArgs)">
            <summary>
            Calls the status notify action event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.AutoEventedDiscoveryServices`1.OnCanCreateServiceFor(ManagedUPnP.AutoEventedDiscoveryServices{`0}.CanCreateServiceForEventArgs)">
            <summary>
            Calls the can create service for event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.AutoEventedDiscoveryServices`1.OnCreateServiceFor(ManagedUPnP.AutoEventedDiscoveryServices{`0}.CreateServiceForEventArgs)">
            <summary>
            Calls the create service for event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ManagedUPnP.AutoEventedDiscoveryServices`1.StatusNotify(ManagedUPnP.AutoDiscoveryServices{`0}.NotifyAction,System.Object)">
            <summary>
            Notifies of status change with data.
            </summary>
            <param name="action">The action for the notification.</param>
            <param name="data">The data for the action (see <see cref="T:ManagedUPnP.AutoDiscoveryServices`1.NotifyAction"/> enumeration).</param>
        </member>
        <member name="M:ManagedUPnP.AutoEventedDiscoveryServices`1.CanCreateAutoServiceFor(ManagedUPnP.Service)">
            <summary>
            Determines whether a service is compatible with T.
            </summary>
            <param name="service">The service to determine compatibility for.</param>
            <returns>True if the service is compatible false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.AutoEventedDiscoveryServices`1.CreateAutoServiceFor(ManagedUPnP.Service)">
            <summary>
            Creates a T object for the specified service.
            </summary>
            <param name="service">The service to create T for.</param>
            <returns>The service created or null if unable to create.</returns>
        </member>
        <member name="E:ManagedUPnP.AutoEventedDiscoveryServices`1.StatusNotifyAction">
            <summary>
            Handles when when a status notification occurs.
            </summary>
        </member>
        <member name="E:ManagedUPnP.AutoEventedDiscoveryServices`1.CanCreateServiceFor">
            <summary>
            Handles when whether a service needs an auto service can be created for it.
            </summary>
        </member>
        <member name="E:ManagedUPnP.AutoEventedDiscoveryServices`1.CreateServiceFor">
            <summary>
            Handles when a service needs an auto service created for it.
            </summary>
        </member>
        <member name="T:ManagedUPnP.AutoEventedDiscoveryServices`1.StatusNotifyActionEventArgs">
            <summary>
            Encapsulates the arguments for the StatusNotifyAction event.
            </summary>
        </member>
        <member name="F:ManagedUPnP.AutoEventedDiscoveryServices`1.StatusNotifyActionEventArgs.mnaAction">
            <summary>
            The action being notified.
            </summary>
        </member>
        <member name="F:ManagedUPnP.AutoEventedDiscoveryServices`1.StatusNotifyActionEventArgs.moData">
            <summary>
            The data for the action.
            </summary>
        </member>
        <member name="M:ManagedUPnP.AutoEventedDiscoveryServices`1.StatusNotifyActionEventArgs.#ctor(ManagedUPnP.AutoDiscoveryServices{`0}.NotifyAction,System.Object)">
            <summary>
            Creates a nwe status notify action event args.
            </summary>
            <param name="notifyAction">The action being notified.</param>
            <param name="data">The data for the action.</param>
        </member>
        <member name="P:ManagedUPnP.AutoEventedDiscoveryServices`1.StatusNotifyActionEventArgs.NotifyAction">
            <summary>
            Gets the notify action raised.
            </summary>
        </member>
        <member name="P:ManagedUPnP.AutoEventedDiscoveryServices`1.StatusNotifyActionEventArgs.Data">
            <summary>
            Gets the data for the notify action. 
            (see <see cref="T:ManagedUPnP.AutoDiscoveryServices`1.NotifyAction"/> )
            enum for more information).
            </summary>
        </member>
        <member name="T:ManagedUPnP.AutoEventedDiscoveryServices`1.CanCreateServiceForEventArgs">
            <summary>
            Encapsulates the arguments for the CanCreateServiceFor event.
            </summary>
        </member>
        <member name="F:ManagedUPnP.AutoEventedDiscoveryServices`1.CanCreateServiceForEventArgs.mbCanCreate">
            <summary>
            Set to true if a service can be created from the found service.
            </summary>
        </member>
        <member name="F:ManagedUPnP.AutoEventedDiscoveryServices`1.CanCreateServiceForEventArgs.msService">
            <summary>
            The service for which is being enquired.
            </summary>
        </member>
        <member name="M:ManagedUPnP.AutoEventedDiscoveryServices`1.CanCreateServiceForEventArgs.#ctor(ManagedUPnP.Service)">
            <summary>
            Creates a new can create service for event arguments.
            </summary>
            <param name="service">The service for the equiry.</param>
        </member>
        <member name="P:ManagedUPnP.AutoEventedDiscoveryServices`1.CanCreateServiceForEventArgs.Service">
            <summary>
            Gets the service for which to create the service for.
            </summary>
        </member>
        <member name="P:ManagedUPnP.AutoEventedDiscoveryServices`1.CanCreateServiceForEventArgs.CanCreate">
            <summary>
            Gets or sets whether a service of this can be created for this service.
            </summary>
        </member>
        <member name="T:ManagedUPnP.AutoEventedDiscoveryServices`1.CreateServiceForEventArgs">
            <summary>
            Encapsulates the arguments for the create service event arguments.
            </summary>
        </member>
        <member name="F:ManagedUPnP.AutoEventedDiscoveryServices`1.CreateServiceForEventArgs.masCreatedAutoService">
            <summary>
            The created auto service for the service.
            </summary>
        </member>
        <member name="M:ManagedUPnP.AutoEventedDiscoveryServices`1.CreateServiceForEventArgs.#ctor(ManagedUPnP.Service)">
            <summary>
            Creates a new create auto service event arguments.
            </summary>
            <param name="service">The service to create the auto service for.</param>
        </member>
        <member name="P:ManagedUPnP.AutoEventedDiscoveryServices`1.CreateServiceForEventArgs.CreatedAutoService">
            <summary>
            Gets or sets the created auto service.
            </summary>
        </member>
        <member name="T:ManagedUPnP.AutoEventedDiscoveryServices`1.CanCreateServiceForEventHandler">
            <summary>
            Event handler for whether a service can have an auto service created for it.
            </summary>
            <param name="sender">The sender of the events.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ManagedUPnP.AutoEventedDiscoveryServices`1.CreateServiceForEventHandler">
            <summary>
            Event handler for whether a service needs an auto service can be created for it.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ManagedUPnP.AutoEventedDiscoveryServices`1.StatusNotifyActionEventHandler">
            <summary>
            Event handler for when a status notification occurs.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:ManagedUPnP.Descriptions.ServiceDescriptionCache">
            <summary>
            Gets the description cache for a service.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.ServiceDescriptionCache.msdcCache">
            <summary>
            The static cache for the service descriptions.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.ServiceDescriptionCache.mdCache">
            <summary>
            The cache dictionary using the UDN and service ID as a key.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.ServiceDescriptionCache.mdURLCache">
            <summary>
            The cache dictionary by URL insead of ID.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ServiceDescriptionCache.KeyFor(UPNPLib.IUPnPDevice,UPNPLib.IUPnPService)">
            <summary>
            Gets the key for a native device and service.
            </summary>
            <param name="device">The native device.</param>
            <param name="service">The native service.</param>
            <returns>The key for the device and service.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ServiceDescriptionCache.RemoveCacheFor(UPNPLib.IUPnPDevice,UPNPLib.IUPnPService)">
            <summary>
            Removes the cache for a native dvice and service.
            </summary>
            <param name="device">The native device.</param>
            <param name="service">The native service.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ServiceDescriptionCache.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ServiceDescriptionCache.RemoveCacheFor(ManagedUPnP.Service)">
            <summary>
            Removes the cache for a service.
            </summary>
            <param name="service">The service to remove the cache for.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ServiceDescriptionCache.ByURL(System.String)">
            <summary>
            Gets an item from the cache by URL.
            </summary>
            <param name="url">The URL to get the item from.</param>
            <returns>The service description found or null if none.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ServiceDescriptionCache.AddURL(System.String,ManagedUPnP.Descriptions.ServiceDescription)">
            <summary>
            Gets an item from the cache by URL.
            </summary>
            <param name="url">The URL to get the item from.</param>
            <param name="desc">The description to add the URL cache.</param>
            <returns>The service description found or null if none.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.ServiceDescriptionCache.Cache">
            <summary>
            Public gets the service description cache object.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.ServiceDescriptionCache.Item(UPNPLib.IUPnPDevice,UPNPLib.IUPnPService)">
            <summary>
            Gets the service description for a native device and service.
            </summary>
            <param name="device">The native device.</param>
            <param name="service">The native service.</param>
            <returns>The service description for the cache or null if not available.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.ServiceDescriptionCache.Item(ManagedUPnP.Service)">
            <summary>
            Gets the service description for service.
            </summary>
            <param name="service">The service to get the cache for.</param>
        </member>
        <member name="T:ManagedUPnP.CodeGen.DeviceExtensions">
            <summary>
            Provides extensions methods for the Device
            class pertaining to code generation.
            </summary>
        </member>
        <member name="M:ManagedUPnP.CodeGen.DeviceExtensions.DefaultCodeGenClassName(ManagedUPnP.Device,ManagedUPnP.CodeGen.ICodeGenProvider)">
            <summary>
            Gets the default code generation class name for a device.
            </summary>
            <param name="device">The device to get the class name for.</param>
            <param name="codeGenProvider">The code generation provider to use.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.DeviceExtensions.GenerateClassFor(ManagedUPnP.Device,ManagedUPnP.CodeGen.ICodeGenProvider,System.String,System.String,ManagedUPnP.CodeGen.ClassScope,System.Boolean,System.Boolean,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Generates the class code for a device.
            </summary>
            <param name="device">The device to generate code for.</param>
            <param name="codeGenProvider">The code generator provider to use.</param>
            <param name="className">The class name of the device class or null to use friendly name.</param>
            <param name="namespaceName">The namespace for the class.</param>
            <param name="classScope">The scope of the class.</param>
            <param name="partial">True to make the class partial, false otherwise.</param>
            <param name="specificDevices">True if generating properties for device specific class types, false to use device non-specific class types.</param>
            <param name="specificServiceNamespace">The name of the service namespace if using specific service class types, null to use service non-specific class types.</param>
            <param name="specificDeviceClasses">The dictionary of UDNs, ClassNames for the devices or null for default / none.</param>
            <param name="specificServiceClasses">The dictionary of IDs, ClassNames for the services or null for default / none.</param>
            <returns>The string representing the code for the class.</returns>
        </member>
        <member name="T:ManagedUPnP.CodeGen.VBNetCodeGenProvider">
            <summary>
            Provides the code generation constants for generating
            VB .Net code.
            </summary>
        </member>
        <member name="F:ManagedUPnP.CodeGen.VBNetCodeGenProvider.msDefaultRootNamespace">
            <summary>
            The default root namespace to use for VB.Net projects or null for none.
            </summary>
        </member>
        <member name="M:ManagedUPnP.CodeGen.VBNetCodeGenProvider.GenerateRegion(System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Generates code for a region if content is available.
            </summary>
            <param name="regionName">The name of the region.</param>
            <param name="regionContent">The content of the region with one empty line at the end and none at the start.</param>
            <param name="addEmptyLineBeforeEnd">True to add empty line before region ending line.</param>
            <param name="addEmptyLineBeforeStart">True to add empty line before region start line.</param>
            <param name="indentation">The indentation (0 = non embedded class).</param>
            <returns>The string for the region.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.VBNetCodeGenProvider.CodeFriendlyIdentifier(System.String,System.Boolean)">
            <summary>
            Gets a code friendly identifier for a string.
            </summary>
            <param name="name">The string.</param>
            <param name="parameter">True if identifier is a parameter (ie. starts with lower case letter).</param>
            <returns>The code friendly identifier.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.VBNetCodeGenProvider.CodeFriendlyIdentifier(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a code friendly identifier for a string.
            </summary>
            <param name="name">The string.</param>
            <param name="parameter">True if identifier is a parameter (ie. starts with lower case letter).</param>
            <param name="allowUnderscores">True to allow underscores from the string.</param>
            <returns>The code friendly identifier.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.VBNetCodeGenProvider.GetClassScope(ManagedUPnP.CodeGen.ClassScope,System.String)">
            <summary>
            Gets the class scope for a ClassScope enumeration.
            </summary>
            <param name="classScope">The class scope enumeration.</param>
            <param name="addAfter">The string to add after the scope if it is available.</param>
            <returns>The class scope as a string.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ArraySizeForCount(System.Int32)">
            <summary>
            Gets the array initialiser size for a specific count.
            </summary>
            <param name="inArgumentCount">The number of elements to be in the array.</param>
            <returns>A string defining the number of elements in the array.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ToString">
            <summary>
            Converts the code provider to a string.
            </summary>
            <returns>The code provider name as a string.</returns>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.PartialClassFileExtension">
            <summary>
            Gets the full file extension for a partial class.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ClassFileExtension">
            <summary>
            Gets the full file extension for class.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ConstantIdentifyer">
            <summary>Gets the code for the constant name.</summary>
            <remarks>Format Parameters: 0 = typeName, 1 = valueName.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ConstantGroupDefinition">
            <summary>Gets the code for the constant group definition.</summary>
            <remarks>Format Parameters: 0 = type, 1 = constantDefinitions.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ConstantComment">
            <summary>Gets the code for the constant comment.</summary>
            <remarks>Format Parameters: 0 = commentText.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ConstantDefinition">
            <summary>Gets the code for the constant definition.</summary>
            <remarks>Format Parameters: 0 = VarName, 1 = value, 2 = comments</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.StateVarNameGroup">
            <summary>
            Gets the group name for state variable constant identifiers.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.AllowedValueGroup">
            <summary>
            Gets the group name for state variable allowed value constant identifiers.
            </summary>
            <remarks>Format Parameters: 0 = StateVarFriendlyName.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ActionNameGroup">
            <summary>
            Gets the group name for action constant identifiers.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ServiceGroup">
            <summary>
            Gets the group name for service constant identifiers.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.DeviceGroup">
            <summary>
            Gets the group name for device constant identifiers.
            </summary>
            <remarks>Format Parameters: 0 = StateVarFriendlyName</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ProtectedConstants">
            <summary>
            Gets the protected constants region name.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.PublicProperties">
            <summary>
            Gets the public properties region name.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ProtectedMethods">
            <summary>
            Gets the protected methods region name.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.PublicEnumerations">
            <summary>
            Gets the public enumerations region name.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.EventHandlers">
            <summary>
            Gets the event handlers region name.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.EventCallers">
            <summary>
            Gets the event callers region name.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.Region">
            <summary>
            Gets the code for a region.
            </summary>
            <remarks>Format Parameters: 0 = regionName, 1 = regionCode, 2 = indentation, 3 = beforeEnd, 4 = beforeStart.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.Null">
            <summary>
            Gets the Null value for a object.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.PartialClass">
            <summary>
            Gets the partial class statement.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.Public">
            <summary>
            Gets the public modifier statement.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.Service">
            <summary>
            Gets the name of the service class.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.Device">
            <summary>
            Gets the name of the device class.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ServiceID">
            <summary>
            Gets the string to append to the string constant names for service IDs.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.DeviceType">
            <summary>
            Gets the string to append to the string constant names for device Types.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.DeviceModelName">
            <summary>
            Gets the string to append to the string constant names for device model names.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.IndentChar">
            <summary>
            Gets the indent char to use for indentation of code.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.EmptyLine">
            <summary>
            Gets the string representing and empty line.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.Space">
            <summary>
            Gets a space.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.UnknownType">
            <summary>
            Gets the type for a parameter when it cannot be determined.
            </summary>
            <remarks>This can occur if a related state variable definition is missing.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ParameterSeperator">
            <summary>
            Gets a comma for delimiting parameters.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.Comma">
            <summary>
            Gets a comma with a trailing space.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.UsingClause">
            <summary>
            Gets the definition for a using clause.
            </summary>
            <remarks>
            Format Parameters:
            0 = Using namespace.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ServiceIdConstComment">
            <summary>
            Gets the definition for the service ID constant comment.
            </summary>
            <remarks>Format Parameters: 0 = service friendly name.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.DeviceTypeConstComment">
            <summary>
            Gets the definition for the device type constant comment.
            </summary>
            <remarks>Format Parameters: 0 = device friendly name.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.GenericDeviceRet">
            <summary>
            Gets the definition for the generic device return value.
            </summary>
            <remarks>
            Format Parameters:
            0 = DeviceClass, 1 = DeviceType.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.GenericServiceRet">
            <summary>
            Gets the definition for the generic service return value.
            </summary>
            <remarks>
            Format Parameters:
            0 = ServiceClass, 1 = ServiceId.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.SpecificDeviceRet">
            <summary>
            Gets the definition for the specific device return value.
            </summary>
            <remarks>
            Format Parameters:
            0 = DeviceClass, 1 = DeviceType.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.SpecificServiceRet">
            <summary>
            Gets the definition for the specific service return value.
            </summary>
            <remarks>
            Format Parameters:
            0 = ServiceClass, 0 = ServiceId.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.Property">
            <summary>
            Gets the definition for a public property.
            </summary>
            <remarks>
            Format Parameters:
            0 = returnType, 1 = propStartName, 2 = propEndName,
            3 = returnValue, 4 = Device/Service name, 5 = Device/Service type, 6 = "Device" / "Service"
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.DeviceClassHeaderComment">
            <summary>
            Gets the code for the comments as the class header.
            </summary>
            <remarks>
            Format Parameters:
            0 = rootDeviceName, 1 = rootDeviceType, 2 = serialNumber
            3 = deviceName, 4 = deviceType,
            5 = dateTime, 6 = className,
            7 = namespaceName, 8 = classScope,
            9 = partialClass, 10 = codeGenerationProvider
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.DeviceBase">
            <summary>
            Gets the definition for the entire device class.
            </summary>
            <remarks>
            Format Parameters:
            0 = using, 1 = namespace, 2 = classScope, 3 = "Partial " if partial class, 
            4 = className, 5 = protectedConstants, 6 = DeviceType, 7 = proprties,
            8 = DeviceModelName, 9 = classHeaderComment
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.AllowedValueComment">
            <summary>
            Gets the comment for the allowed value constants.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.StateVarNameComment">
            <summary>
            Gets the comment for the state var name constants.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ActionNameComment">
            <summary>
            Gets the comment for the action name constants.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.EnumStateVarName">
            <summary>
            Gets the name for an enum state var type.
            </summary>
            <remarks>Format Parameters: 0 = StateVarFriendlyName.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.StateVarEnum">
            <summary>
            Gets the definition for an enum state var type.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarName, 1 = stateVarValues.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.EnumStateVarEventConversion">
            <summary>
            Gets the code used to convert non enum state var value to typed value.
            </summary>
            <remarks>Format Parameters: 0 = stateVarFriendlyName</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.EnumStateVarValue">
            <summary>
            Gest the enumeration value for an enum state variable.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarEnumValue, 1 = stateVarName
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.NonEnumStateVar">
            <summary>
            Gets the definition for the property of a non enum state variable.
            </summary>
            <remarks>
            Format Parameters:
            0 = returnType, 1 = stateVarFriendlyName, 2 = stateVarName, 3 = state var comment
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.NonEnumStateVarEventConversion">
            <summary>
            Gets the code used to convert non enum state var value to typed value.
            </summary>
            <remarks>Format Parameters: 0 = stateVarType</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.EnumParseCaseStatement">
            <summary>
            Gets the parsing case statement for an enum type.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarValue, 1 = stateVarName, 2 = stateVarEnumValue.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.EnumToStringCaseStatement">
            <summary>
            Gets the to string case statement for an enum type.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarName, 1 = stateVarEnumValue, 2 = stateVarValue.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.StateVariableEventHandler">
            <summary>
            Gets the event handler definition for state variable changes.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarType, 1 = stateVarName.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.StateVariableEventCaller">
            <summary>
            Gets the event caller definition for state variable changes.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarType, 1 = stateVarName.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.EnumStateVarConversion">
            <summary>
            Gets the code for converting a state var enum type from and to a string.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarFriendlyName, 1 = parseCaseStatements, 2 = toStringCaseStatements.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.EnumStateVar">
            <summary>
            Gets the definition for the property of an enum state variable.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarFriendlyName, 1 = stateVarName, 2 = state var description.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ActionInArgument">
            <summary>
            Gets the definition for an actions in parameter argument.
            </summary>
            <remarks>
            Format Parameters:
            0 = ArgumentType, 1 = ArgumentName, 2 = ", " if required.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ActionOutArgument">
            <summary>
            Gets the definition for an action out parameter argument.
            </summary>
            <remarks>
            Format Parameters:
            0 = ArgumentType, 1 = ArgumentName, 2 = ", " if required.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.InSetValue">
            <summary>
            Gets the definition for setting an actions in value.
            </summary>
            <remarks>
            Format Parameters:
            0 = InArgumentIndex, 1 = InArgumentName.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.InSetValueEnum">
            <summary>
            Gets the definition for setting an actions in enumerated value.
            </summary>
            <remarks>
            Format Parameters:
            0 = InArgumentIndex, 1 = StateVarEnumName, 2 = InArgumentName.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.OutSetValue">
            <summary>
            Gets the definition for setting an actions out value.
            </summary>
            <remarks>
            Format Parameters:
            0 = OutArgumentName, 1 = OutArgumentType, 2 = OutArgumentIndex.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.OutSetValueEnum">
            <summary>
            Gets the definition for setting an actions out enumerated value.
            </summary>
            <remarks>
            Format Parameters:
            0 = OutArgumentName, 1 = StateVarEnumName, 2 = OutArgumentIndex.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.OutReturnValue">
            <summary>
            Gets the definition for return an actions out value.
            </summary>
            <remarks>
            Format Parameters:
            0 = OutArgumentType, 1 = OutArgumentIndex.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.OutReturnValueEnum">
            <summary>
            Gets the definition for return an actions out enumerated value.
            </summary>
            <remarks>
            Format Parameters:
            0 = StateVarEnumName, 1 = OutArgumentIndex.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ActionReturnsComment">
            <summary>
            Gets the comment line used for an actions return value.
            </summary>
            <remarks>
            Format Parameters:
            0 = name, 1 = information.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ArgumentComment">
            <summary>
            Gets the action argument comment.
            </summary>
            <remarks>
            Format Parameters:
            0 = actionName, 1 = extra state var Comments.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.StateVarComment">
            <summary>
            Gets the state var comment.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarName, 1 = extra state var comments.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.StateVarAllowedRangeComment">
            <summary>
            Gets the state var allowed range comment.
            </summary>
            <remarks>
            Format Parameters:
            0 = minimum range, 1 = maximum range.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.StateVarStepComment">
            <summary>
            Gets the state var step comment.
            </summary>
            <remarks>
            Format Parameters:
            0 = increment step value.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.StateVarAllowedValues">
            <summary>
            Gets the state var allowed values comment.
            </summary>
            <remarks>
            Format Parameters:
            0 = state var allowed values list.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.StateVarDefaultValueComment">
            <summary>
            Gets the state var default value comment.
            </summary>
            <remarks>
            Format Parameters:
            0 = state var default value
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ArgMinimum">
            <summary>
            Gets the state var allowed range when no minimum comment.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ArgMaximum">
            <summary>
            Gets the state var allowed range when no maximum comment.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.AllowedValue">
            <summary>
            Gets the comment for an allowed values list.
            </summary>
            <remarks>
            Format Parameters:
            0 = comma with space if needed, 1 = allowedValueText.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ActionInParamComment">
            <summary>
            Gets the comment line used for an actions in parameter value.
            </summary>
            <remarks>Format Parameters: 0 = name, 1 = information.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ActionOutParamComment">
            <summary>
            Gets the comment line used for an actions out parameter value.
            </summary>
            <remarks>Format Parameters: 0 = name, 1 = information.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.OutVar">
            <summary>
            Gets the code for the out variables declaration in an action method.
            </summary>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.Action">
            <summary>
            Gets the definition for a multi out parameter action.
            </summary>
            <remarks>
            Format Parameters:
            0 = ActionFunctionName, 1 = InArguments, 2 = OutArguments
            3 = CountInArguments, 4 = InSetValues, 5 = ActionName,
            6 = OutSetValues, 7 = InOutArgumentsComma, 8 = return type,
            9 = in params comments, 10 = out params comments, 11 = returns comments,
            12 = out var or string.empty if not used
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ReturnAction">
            <summary>
            Gets the definition for a single out parameter action.
            </summary>
            <remarks>
            Format Parameters:
            0 = ActionFunctionName, 1 = InArguments, 2 = OutArguments (string.Empty)
            3 = CountInArguments, 4 = InSetValues, 5 = ActionName,
            6 = OutSetValues, 7 = InOutArgumentsComma, 8 = OutReturnType, 
            9 = in params comments, 10 = out params comments, 11 = returns comments.
            12 = out var or string.empty if not used
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.StateVarChangedEventHandlerCaseStatement">
            <summary>
            Gets the overrided state var redirection code - sends the event for actual state variable
            as well as the for the Object type variable.
            </summary>
            <remarks>
            Format Parameters:
            0 = stateVarNameConstant, 1 = StateVarName, 2 = StateVarType, 3 = stateVarConvertedValue.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.StateVarChangedEventHandler">
            <summary>
            Gets the overrided state var changed event handler to pass through real state changed event handlers.
            </summary>
            <remarks>Format Parameters: 0 = case code for each state variable.</remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ServiceClassHeaderComment">
            <summary>
            Gets the code for the comments as the class header.
            </summary>
            <remarks>
            Format Parameters:
            0 = rootDeviceName, 1 = rootDeviceType, 2 = serialNumber
            3 = deviceName, 4 = deviceType,
            5 = serviceName, 6 = serviceType
            7 = dateTime, 8 = className,
            9 = namespaceName, 10 = classScope,
            11 = partialClass, 12 = testStateVars.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.ServiceBase">
            <summary>
            Gets the definition for the entire service class.
            </summary>
            <remarks>
            Format Parameters:
            0 = namespace, 1 = classname, 2 = serviceType, 3 = enuemrations, 
            4 = "Partial " if partial class, else string.empty, 5 = StateVarConversions,
            6 = ActionMethods, 7 = StateVarProps, 8 = stringConstants, 9 = classModifiers,
            10 = eventHandlers, 11 = eventCallers, 12 = classHeaderComment.
            </remarks>
        </member>
        <member name="P:ManagedUPnP.CodeGen.VBNetCodeGenProvider.DefaultRootNamespace">
            <summary>
            Gets or sets the default root namespace to use in
            using clauses for VB.NET projects.
            </summary>
        </member>
        <member name="T:ManagedUPnP.UPnPException">
            <summary>
            Encpasulates an exception which occurs with a UPnP call.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.mecCode">
            <summary>
            The UPnPErrorCode for the error
            </summary>
        </member>
        <member name="M:ManagedUPnP.UPnPException.#ctor(System.Int32,System.Exception)">
            <summary>
            Creates a new UPnP exception.
            </summary>
            <param name="code">The code for the error (COMException.ErrorCode).</param>
            <param name="innerException">The innder exception or null for none.</param>
        </member>
        <member name="M:ManagedUPnP.UPnPException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Creates a new UPnPException.
            </summary>
            <param name="comException">The underlying COM Exception.</param>
        </member>
        <member name="M:ManagedUPnP.UPnPException.#ctor(ManagedUPnP.UPnPException.UPnPErrorCode,System.Exception)">
            <summary>
            Creates a new UPnPException.
            </summary>
            <param name="code">The code for the error (COMException.ErrorCode).</param>
            <param name="innerException">The innder exception or null for none.</param>
        </member>
        <member name="P:ManagedUPnP.UPnPException.Code">
            <summary>
            Gets the underlying UPnPErrorCode
            </summary>
        </member>
        <member name="T:ManagedUPnP.UPnPException.UPnPErrorCode">
            <summary>
            The UPnP error codes.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.SEVERITY_ERROR">
            <summary>
            Base for severity error.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.FACILITY_ITF">
            <summary>
            Base value for underlying COM errors.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.COM_ERROR_BASE">
            <summary>
            The base for all COM errors.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_ROOT_ELEMENT_EXPECTED">
            <summary>
            XML document does not have a root element at the top level of 
            the document.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_DEVICE_ELEMENT_EXPECTED">
            <summary>
            XML document does not have a device element. It is missing either 
            from the root element or the DeviceList element.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_SERVICE_ELEMENT_EXPECTED">
            <summary>
            XML document does not have a service element. It is missing from the 
            ServiceList element, or the DeviceList element does not contain a 
            ServiceList element.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_SERVICE_NODE_INCOMPLETE">
            <summary>
            XML document is missing one of the required elements from the 
            Service element.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_DEVICE_NODE_INCOMPLETE">
            <summary>
            XML document is missing one of the required elements from the 
            Device element.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_ICON_ELEMENT_EXPECTED">
            <summary>
            XML document does not have an icon element. It is missing from 
            the IconList element, or the DeviceList element does not 
            contain an IconList element.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_ICON_NODE_INCOMPLETE">
            <summary>
            XML document is missing one of the required elements from 
            the Icon element.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_INVALID_ACTION">
            <summary>
            Invalid action invoked.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_INVALID_ARGUMENTS">
            <summary>
            Invalid arguments while invoking action.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_OUT_OF_SYNC">
            <summary>
            UPnP Device is out of sync.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_ACTION_REQUEST_FAILED">
            <summary>
            Action request failed.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_TRANSPORT_ERROR">
            <summary>
            Underlying network transport error.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_VARIABLE_VALUE_UNKNOWN">
            <summary>
            Could not get variable value.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_INVALID_VARIABLE">
            <summary>
            State variable does not exist.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_DEVICE_ERROR">
            <summary>
            Device error.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_PROTOCOL_ERROR">
            <summary>
            Protocol error.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_ERROR_PROCESSING_RESPONSE">
            <summary>
            Response error.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_DEVICE_TIMEOUT">
            <summary>
            Device timeout.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_INVALID_DOCUMENT">
            <summary>
            Invalid document.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_EVENT_SUBSCRIPTION_FAILED">
            <summary>
            Event subscription failed.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.FAULT_INVALID_ACTION">
            <summary>
            Invalid action.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.FAULT_INVALID_ARG">
            <summary>
            Invalid argument.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.FAULT_INVALID_SEQUENCE_NUMBER">
            <summary>
            Invalid sequence.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.FAULT_INVALID_VARIABLE">
            <summary>
            Invalid variable.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.FAULT_DEVICE_INTERNAL_ERROR">
            <summary>
            Device internal error.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.FAULT_ACTION_SPECIFIC_BASE">
            <summary>
            Base value for action faults.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.FAULT_ACTION_SPECIFIC_MAX">
            <summary>
            Max value for action faults.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_ACTION_SPECIFIC_BASE">
            <summary>
            Base value for specific action faults.
            </summary>
        </member>
        <member name="F:ManagedUPnP.UPnPException.UPnPErrorCode.UPNP_E_ACTION_SPECIFIC_MAX">
            <summary>
            Max value for specific action faults.
            </summary>
        </member>
        <member name="T:ManagedUPnP.AddressFamilyFlags">
            <summary>
            Flags to determine which IP Version to search for devices in. (Vista and above only)
            </summary>
        </member>
        <member name="F:ManagedUPnP.AddressFamilyFlags.IPv4">
            <summary>
            IP Version 4.0 only.
            </summary>
        </member>
        <member name="F:ManagedUPnP.AddressFamilyFlags.IPv6">
            <summary>
            IP Version 6.0 only.
            </summary>
        </member>
        <member name="F:ManagedUPnP.AddressFamilyFlags.IPvBoth">
            <summary>
            Any IP Version.
            </summary>
        </member>
        <member name="T:ManagedUPnP.DeviceRemovedEventArgs">
            <summary>
            Encapsulates the event arguments for when a device is removed.
            </summary>
        </member>
        <member name="F:ManagedUPnP.DeviceRemovedEventArgs.msUDN">
            <summary>
            The UDN of the device removed.
            </summary>
        </member>
        <member name="M:ManagedUPnP.DeviceRemovedEventArgs.#ctor(System.String)">
            <summary>
            Creates a new device removed event arguments.
            </summary>
            <param name="udn">The UDN of the device being removed.</param>
        </member>
        <member name="P:ManagedUPnP.DeviceRemovedEventArgs.UDN">
            <summary>
            Gets the UDN for the device that ws removed.
            </summary>
        </member>
        <member name="T:ManagedUPnP.DeviceCheckFlags">
            <summary>
            Used for code generation for device check comparison.
            </summary>
        </member>
        <member name="F:ManagedUPnP.DeviceCheckFlags.None">
            <summary>
            No checks are performed.
            </summary>
        </member>
        <member name="F:ManagedUPnP.DeviceCheckFlags.DeviceType">
            <summary>
            Check to ensure device type matches.
            </summary>
        </member>
        <member name="F:ManagedUPnP.DeviceCheckFlags.DeviceModelName">
            <summary>
            Check to ensure device model name matches.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.ServiceDescription">
            <summary>
            Encapsulates the description for a service.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.ServiceDescription.msElement">
            <summary>
            The element name for the service description.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.ServiceDescription.msSchema">
            <summary>
            The schema url description.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.ServiceDescription.msServiceId">
            <summary>
            The service ID.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.ServiceDescription.msDeviceUDN">
            <summary>
            The device unique device name.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.ServiceDescription.msvVersion">
            <summary>
            The document version number description.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.ServiceDescription.maActions">
            <summary>
            The description for the list of actions.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.ServiceDescription.msvStateVariables">
            <summary>
            The description for the list of state variables.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.ServiceDescription.msDocumentURL">
            <summary>
            The document URL for the description.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ServiceDescription.IsStartNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ServiceDescription.IsEndNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ServiceDescription.#ctor(ManagedUPnP.Descriptions.Description,System.String,System.String,System.String,System.Xml.XmlTextReader)">
            <summary>
            Creates a new service description.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="documentURL">The document URL for the service.</param>
            <param name="deviceUDN">The unique device number for the device.</param>
            <param name="serviceId">The service ID for the service.</param>
            <param name="reader">The reader to load the service description from.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ServiceDescription.Initialise">
            <summary>
            Initialises the service description.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ServiceDescription.UseNode(System.Xml.XmlTextReader,System.String)">
            <summary>
            Uses an XML node for this description.
            </summary>
            <param name="reader">The XML reader to use the node from.</param>
            <param name="lastNodeName">The last node name.</param>
            <returns>True if the node was processed false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ServiceDescription.IsEndNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ServiceDescription.IsStartNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ServiceDescription.ToString(System.Int32)">
            <summary>
            Converts the description to a string.
            </summary>
            <param name="indent">The indent for the string.</param>
            <returns>The string representation for the description.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.ServiceDescription.SpecVersion">
            <summary>
            Gets the version specification description.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.ServiceDescription.DocumentURL">
            <summary>
            Gets the document URL for the description.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.ServiceDescription.Actions">
            <summary>
            Gets the actions list description.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.ServiceDescription.StateVariables">
            <summary>
            Gets the state variables list description.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.ServiceDescription.Schema">
            <summary>
            The schema url description.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.ServiceDescription.DeviceUDN">
            <summary>
            The device unique device name.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.ServiceDescription.ServiceId">
            <summary>
            Gets the ID for the service.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.ArgumentsDescription">
            <summary>
            Encapsulates the description for a list of action arguments.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.ArgumentsDescription.msElement">
            <summary>
            The element name for the arguments list.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ArgumentsDescription.IsEndNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the end of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ArgumentsDescription.IsStartNodeFor(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ArgumentsDescription.#ctor(ManagedUPnP.Descriptions.Description)">
            <summary>
            Creates a new list of arguments description.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ArgumentsDescription.#ctor(ManagedUPnP.Descriptions.Description,System.Xml.XmlTextReader)">
            <summary>
            Creates a new list of arguments description from a reader.
            </summary>
            <param name="parent">The parent description object, or null if root description.</param>
            <param name="reader">The XML reader to load the arguments from.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ArgumentsDescription.ArgDirCount(ManagedUPnP.Descriptions.ArgumentDirection)">
            <summary>
            Counts the number of arguments with a specified direction.
            </summary>
            <param name="dir">The direction of the arguments.</param>
            <returns>The number of arguments matching the direction.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ArgumentsDescription.UseNode(System.Xml.XmlTextReader,System.String)">
            <summary>
            Uses an XML node for this description.
            </summary>
            <param name="reader">The XML reader to use the node from.</param>
            <param name="lastNodeName">The last node name.</param>
            <returns>True if the node was processed false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ArgumentsDescription.IsEndNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.ArgumentsDescription.IsStartNode(System.Xml.XmlTextReader)">
            <summary>
            Gets whether the current node for a reader marks the start of this description.
            </summary>
            <param name="reader">The XML text reader.</param>
            <returns>True or false.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.ArgumentsDescription.InArgCount">
            <summary>
            Gets the number of arguments that have an In direction.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.ArgumentsDescription.OutArgCount">
            <summary>
            Gets the number of arguments that have an Out direction.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.UsesPropertyAttribute">
            <summary>
            Attribute which signifies that a property has been used by the description object.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.UsesPropertyAttribute.msName">
            <summary>
            The name of the proeperty that is used.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.UsesPropertyAttribute.#ctor(System.String)">
            <summary>
            Creates a new uses property attribute.
            </summary>
            <param name="name">The name of the property being used.</param>
        </member>
        <member name="P:ManagedUPnP.Descriptions.UsesPropertyAttribute.Name">
            <summary>
            Gets the name of the property being used.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Components.ServiceFindOption">
            <summary>
            Specifies which services to raise the service added event for.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.ServiceFindOption.None">
            <summary>
            Do not raise ServiceAdded event.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.ServiceFindOption.FoundDeviceDirectChildrenOnly">
            <summary>
            Only raise ServiceAdded event for direct child services 
            of each Device which has had a DeviceAdded event 
            raised for it.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.ServiceFindOption.AllDeviceChildrenServices">
            <summary>
            Raise ServiceAdded event for every child service of every 
            device and child device, while not raising the event more
            than once for a particular service.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.ServiceFindOption.AllSearchURIMatchesServiceTypeId">
            <summary>
            Raise ServiceAdded event for every child service which matches
            its ServiceTypeId to the SearchURI of every 
            device and child device, while not raising the event more
            than once for a particular service.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.ServiceFindOption.FoundDeviceDirectChildrenOnlySearchURIMatchesServiceTypeId">
            <summary>
            Only raise ServiceAdded event for direct child service
            which matches its ServiceTypeId to the SearchURI 
            of each Device which has had a DeviceAdded event 
            raised for it.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Services">
            <summary>
            Encapsulates a list of services.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Services.#ctor(UPNPLib.IUPnPDevice,System.Guid,System.String,System.Boolean)">
            <summary>
            Creates a new services list from a native device.
            </summary>
            <param name="device">The device to add the services for.</param>
            <param name="interfaceGuid">The network interface Guid for the device.</param>
            <param name="serviceType">The service type to add or null for all.</param>
            <param name="includingChildDevices">True to add all child devices services.</param>
        </member>
        <member name="M:ManagedUPnP.Services.#ctor">
            <summary>
            Creates an empty services list.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Services.#ctor(ManagedUPnP.Device,System.String,System.Boolean)">
            <summary>
            Creates a new services list from a device.
            </summary>
            <param name="device">The device to add the services for.</param>
            <param name="serviceType">The service type to add or null for all.</param>
            <param name="includingChildDevices">True to add all child devices services.</param>
        </member>
        <member name="M:ManagedUPnP.Services.AddFrom(UPNPLib.IUPnPDevice,System.Guid,System.String,System.Boolean)">
            <summary>
            Adds services from a native device.
            </summary>
            <param name="device">The device to add the services for.</param>
            <param name="interfaceGuid">The network interface Guid for the device.</param>
            <param name="serviceType">The service type to add or null for all.</param>
            <param name="includingChildDevices">True to add all child devices services.</param>
        </member>
        <member name="M:ManagedUPnP.Services.AddFrom(ManagedUPnP.Device,System.String,System.Boolean)">
            <summary>
            Adds services from a device.
            </summary>
            <param name="device">The device to add the services for.</param>
            <param name="serviceType">The service type to add or null for all.</param>
            <param name="includingChildDevices">True to add all child devices services.</param>
        </member>
        <member name="M:ManagedUPnP.Services.FindByType(System.String)">
            <summary>
            Finds all services of a certain type.
            </summary>
            <param name="serviceType">The type to get the services for.</param>
            <returns>A new Services object.</returns>
        </member>
        <member name="P:ManagedUPnP.Services.Item(System.String)">
            <summary>
            Gets the service by Id for this list.
            </summary>
            <param name="id">The id for the service to get.</param>
            <returns>The Service if id is found or null if not.</returns>
        </member>
        <member name="T:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2">
            <summary>
            Encapsulates a Dictionary which is guaranteed to preserve its order.
            </summary>
            <remarks>
            According to the Microsoft doco, the Dictionary class will not necessarily
            preserve its order, this is because it stores its data in order of the hash
            key, not in the order added. However, I have tested this behaviour with
            Dictionaries of int, int. Using all different values in different orders, and
            the order always seems preserved. Either Microsoft is wrong, or the GetHashCode
            functions for int are really bad. Either way, this class is designed to keep
            the dictionary items in the same order they were added, which is necessary for
            the ArgumentsDescription dictionary.
            
            This class takes up more memory, as it has to store a Dictionary and a List of
            keys, but it should be reasonably close in performance.
            </remarks>
            <typeparam name="TKey">The type for the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type for the values in the dictionary.</typeparam>
        </member>
        <member name="F:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.mdDictionary">
            <summary>
            The internal dictionary used for hash lookups.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.mlKeys">
            <summary>
            The list of keys in the order they were added.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.#ctor">
            <summary>
            Creates a new ordered indexed dictionary.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.#ctor(System.Int32)">
            <summary>
            Creates a new ordered indexed dictionary of a certain capacity.
            </summary>
            <param name="capacity">The initial capacity for the dictionary.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value for a key.
            </summary>
            <param name="key">The key to get the value for.</param>
            <param name="value">The value returned, or default if key not found.</param>
            <returns>True if the key was found, false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.PairAt(System.Int32)">
            <summary>
            Gets the KeyValuePair at a specified index.
            </summary>
            <param name="index">The index for the KeyValuePair.</param>
            <returns>The KeyValuePair found.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts a key and value into the dictionary.
            </summary>
            <param name="index">The index to insert the new item above.</param>
            <param name="key">The key for the new item.</param>
            <param name="value">The value for the new item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Key already exists.</exception>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.System#Collections#Generic#IList{TKey}#Insert(System.Int32,`0)">
            <summary>
            Inserts an item (not used).
            </summary>
            <param name="index">The index to insert at.</param>
            <param name="key">The key to insert.</param>
            <remarks>Invalid for this dictionary.</remarks>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.IndexOf(`0)">
            <summary>
            Gets the index of a key.
            </summary>
            <param name="key">The key to get the index for.</param>
            <returns>The index of the key if found, or -1 if not.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Removes the item at an index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.System#Collections#Generic#ICollection{TKey}#Add(`0)">
            <summary>
            Adds a key to dictionary.
            </summary>
            <param name="key">The key to add.</param>
            <remarks>Invalid for this dictionary.</remarks>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.Contains(`0)">
            <summary>
            Gets whether a key exists in the dictionary.
            </summary>
            <param name="key">The key to check for existence.</param>
            <returns>True if the key exists, false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.Clear">
            <summary>
            Clears the dictionary.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.CopyTo(`0[],System.Int32)">
            <summary>
            Copys keys in the preserved order to an array.
            </summary>
            <param name="keys">The array to receive the keys.</param>
            <param name="arrayIndex">The first arrayIndex in array to receive the keys.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
            <summary>
            Removes an item by key from the dictionary.
            </summary>
            <param name="key">The key of the item to remove.</param>
            <returns>True if the key was found and removed, false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
            <summary>
            Gets the enumerator for the keys in the correct order.
            </summary>
            <returns>The enumerator for the keys.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the standard object enumerator (keys only)
            </summary>
            <returns>The keys enumerator.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.Add(`0,`1)">
            <summary>
            Adds a new key and value to the end of the dictionary.
            </summary>
            <param name="key">The key of the item to add.</param>
            <param name="value">The value of the item to add.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.ContainsKey(`0)">
            <summary>
            Gets whether a key exists in the dictionary.
            </summary>
            <param name="key">The key to check for existence.</param>
            <returns>True if the key exists, false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
            <summary>
            Removes an item by key from the dictionary.
            </summary>
            <param name="key">The key of the item to remove.</param>
            <returns>True if the key was found, false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds a new key value pair to the end of the dictionary.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Gets whether a key and value exists in the dictionary.
            </summary>
            <param name="item">The item containing the key and value.</param>
            <returns>True if the key and its value match, false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copys key value pairs in the preserved order to an array.
            </summary>
            <param name="array">The array to receive the key value pairs.</param>
            <param name="arrayIndex">The first arrayIndex in array to receive the keys.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex cannot be less than 0.</exception>
            <exception cref="T:System.ArgumentException">array does not have enough space.</exception>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes an item from the dictionary if the key and value matches.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was removed, false otherwise.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.GetEnumerator">
            <summary>
            Gets the KeyValuePair enumerator which returns the items in the correct order.
            </summary>
            <returns>The Enumerator of KeyValuePairs.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the value for an index.
            </summary>
            <param name="index">The index to get the value for.</param>
            <returns>The value found.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value for a key.
            </summary>
            <param name="key">The key to the get the value for. If setting and key is not found, then item is added to end of dictionary.</param>
            <returns>The value found.</returns>
        </member>
        <member name="P:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.System#Collections#Generic#IList{TKey}#Item(System.Int32)">
            <summary>
            Gets the key for an index.
            </summary>
            <param name="index">The index to get the key for.</param>
            <returns>The key at the index.</returns>
            <remarks>Setting is invalid for this dictionary.</remarks>
        </member>
        <member name="P:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.Count">
            <summary>
            Gets the number of items in the dictionary.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.IsReadOnly">
            <summary>
            Gets whether this list is readonly.
            </summary>
            <remarks>As a list this dictionary IS readonly.</remarks>
        </member>
        <member name="P:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.Keys">
            <summary>
            Gets the keys as a collection in the correct order.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.Values">
            <summary>
            Gets a collection of the values for the dictionary in the correct order.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.OrderedIndexedDictionaryEnumerator">
            <summary>
            Encapsulates the ordered enumerator.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.OrderedIndexedDictionaryEnumerator.mdDictionary">
            <summary>
            The dictionary for which we want to enumerate.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.OrderedIndexedDictionaryEnumerator.miIndex">
            <summary>
            The current index within the dictionary.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.OrderedIndexedDictionaryEnumerator.#ctor(ManagedUPnP.Descriptions.OrderedIndexedDictionary{`0,`1})">
            <summary>
            Creates a new enumerator.
            </summary>
            <param name="dictionary">The dictionary to enumerate.</param>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.OrderedIndexedDictionaryEnumerator.Dispose">
            <summary>
            Disposes of the enumerator.
            </summary>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.OrderedIndexedDictionaryEnumerator.MoveNext">
            <summary>
            Moves to the next value in the enumeration.
            </summary>
            <returns>True if more values are available.</returns>
        </member>
        <member name="M:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.OrderedIndexedDictionaryEnumerator.Reset">
            <summary>
            Resets the enumerator to the start.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.OrderedIndexedDictionaryEnumerator.Current">
            <summary>
            Gets the current key value pair being enumerated.
            </summary>
        </member>
        <member name="P:ManagedUPnP.Descriptions.OrderedIndexedDictionary`2.OrderedIndexedDictionaryEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current object being enumerated.
            </summary>
        </member>
        <member name="T:ManagedUPnP.Components.DeviceFindOption">
            <summary>
            Specifies which devices to raise a DeviceAdded event for.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.DeviceFindOption.FoundDevicesOnly">
            <summary>
            Only raise event for devices directly found by the search,
            or devices which have services which were directly found by 
            the search.
            </summary>
        </member>
        <member name="F:ManagedUPnP.Components.DeviceFindOption.AllChildrenDeivces">
            <summary>
            Raise the DevicesAdded event for each device and child device
            which is found.
            </summary>
        </member>
        <member name="T:ManagedUPnP.CodeGen.ServiceGen">
            <summary>
            Encapsulates a static class which can generate class code for a service.
            </summary>
        </member>
        <member name="F:ManagedUPnP.CodeGen.ServiceGen.mcgCodeGenProvider">
            <summary>
            The code generation constant provider to use.
            </summary>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ServiceGen.#ctor(ManagedUPnP.CodeGen.ICodeGenProvider)">
            <summary>
            Creates a new service class code generator.
            </summary>
            <param name="codeGenProvider">The provider to use when generating the code.</param>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ServiceGen.GenerateActionCode(ManagedUPnP.CodeGen.StringConstants,System.Text.StringBuilder,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.Dictionary{System.String,System.String},ManagedUPnP.Descriptions.ServiceDescription)">
            <summary>
            Generates the code for all actions.
            </summary>
            <param name="consts">The stirng constants created.</param>
            <param name="actionMethods">The StringBuilder to contain the action call methods.</param>
            <param name="enumStateVars">A HashSet of the state variables which are enumerations.</param>
            <param name="stateVarTypes">A Dictionary containing the state variables and their data types.</param>
            <param name="desc">The service description to generate the action code for.</param>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ServiceGen.GenerateStateVariableDescriptionComment(ManagedUPnP.Descriptions.StateVariableDescription)">
            <summary>
            Generates the descriptive details for a state variable, eg. AllowedRange, Defulat, AllowedValues.
            </summary>
            <param name="stateVarDesc">The state variable description describing the state variable.</param>
            <returns>A string containing a single line comment.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ServiceGen.GenerateStateVarComment(ManagedUPnP.Descriptions.StateVariableDescription)">
            <summary>
            Generates the comments for a state variable including its name.
            </summary>
            <param name="stateVarDesc">The state variable description describing the state variable.</param>
            <returns>A string containing a single line comment.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ServiceGen.GenerateArgumentDescriptionComment(ManagedUPnP.Descriptions.ArgumentDescription)">
            <summary>
            Generates the comments for an actions method argument including its name.
            </summary>
            <param name="argumentDesc">The argument description describing the argument of the action.</param>
            <returns>A string containing a single line comment.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ServiceGen.GenerateInArgumentCode(ManagedUPnP.Descriptions.ArgumentDescription,System.Int32,System.Text.StringBuilder,System.Text.StringBuilder,System.Boolean,System.String,System.String,System.String,System.Text.StringBuilder)">
            <summary>
            Generates the code for an in argument.
            </summary>
            <param name="argumentDesc">The argument description.</param>
            <param name="inArgumentIndex">The argument index.</param>
            <param name="inArguments">The StringBuilder to append the argument definition to.</param>
            <param name="inSetValues">The StringBuilder to append the argument set values to.</param>
            <param name="enumStateVar">True if the state variable is an enumeration type.</param>
            <param name="argFriendlyName">The code friendly argument name.</param>
            <param name="relatedStateVarFriendlyName">The related state variable code friendly name.</param>
            <param name="type">The data type for the argument.</param>
            <param name="comments">A StringBuilder to append the comments line for the parameter to.</param>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ServiceGen.GenerateOutArgumentReturnCode(ManagedUPnP.Descriptions.ArgumentDescription,System.Int32,System.Text.StringBuilder,System.Boolean,System.String,System.String,System.Text.StringBuilder)">
            <summary>
            Generates the code for an out argument which is on its own in the action.
            </summary>
            <param name="argumentDesc">The argument description.</param>
            <param name="outArgumentIndex">The out argument index (0).</param>
            <param name="outSetValues">A StringBuilder to append the out set value code to.</param>
            <param name="enumStateVar">True if the argument is an enumeration type.</param>
            <param name="relatedStateVarFriendlyName">The related state variable code friendly name.</param>
            <param name="type">The data type for the argument.</param>
            <param name="comments">A StringBuilder to append the comments line for the return parameter to.</param>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ServiceGen.GenerateOutArgumentCode(ManagedUPnP.Descriptions.ArgumentDescription,System.Int32,System.Text.StringBuilder,System.Text.StringBuilder,System.Boolean,System.String,System.String,System.String,System.Text.StringBuilder)">
            <summary>
            Generates the code for an out argument which is NOT on its own in the action.
            </summary>
            <param name="argumentDesc">The argument description.</param>
            <param name="outArgumentIndex">The out argument index (0).</param>
            <param name="outArguments">A StringBuilder to append the out arguments to.</param>
            <param name="outSetValues">A StringBuilder to append the out set value code to.</param>
            <param name="enumStateVar">True if the argument is an enumeration type.</param>
            <param name="argFriendlyName">The code friendly name of the out argument.</param>
            <param name="relatedStateVarFriendlyName">The related state variable code friendly name.</param>
            <param name="type">The data type for the argument.</param>
            <param name="comments">A StringBuilder to append the comments line for the parameter to.</param>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ServiceGen.GenerateStateVarCode(ManagedUPnP.Service,System.Boolean,ManagedUPnP.CodeGen.StringConstants,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.Dictionary{System.String,System.String},ManagedUPnP.Descriptions.ServiceDescription)">
            <summary>
            Generates the code for all state variables.
            </summary>
            <param name="service">The service containing the state variables.</param>
            <param name="testStateVars">
            True to test each state variable to ensure it is 
            usuable for accessing as property, false to include
            all state variables as properties.</param>
            <param name="consts">The string constants created.</param>
            <param name="stateVarProps">A StringBuilder to contain property definitions.</param>
            <param name="stateVarConversion">A StringBuilder to contain the conversion method definitions.</param>
            <param name="stateVarEnums">A StringBuilder to contain the enumerations for the state variables.</param>
            <param name="eventHandlers">A StringBuilder to contain event handler declarations for the state variable changes.</param>
            <param name="eventCallers">A StringBuilder to contain event caller methods for the state variable changes.</param>
            <param name="stateVarEventIntercept">A StringBuilder to contain case statement code for each event state variable.</param>
            <param name="enumStateVars">A HashSet containing the names of all enumerated state variables.</param>
            <param name="stateVarTypes">A Dictionary to contain each state variaible name and its code data type.</param>
            <param name="desc">The service description to create the state variable code from.</param>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ServiceGen.GenerateStateVarCode(ManagedUPnP.CodeGen.StringConstants,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Collections.Generic.Dictionary{System.String,System.String},ManagedUPnP.Descriptions.StateVariableDescription,System.String,System.Boolean)">
            <summary>
            Generates the code for a NON enumerated state variable.
            </summary>
            <param name="consts">The string constants created.</param>
            <param name="stateVarProps">A StringBuilder to contain property definitions.</param>
            <param name="eventHandlers">A StringBuilder to contain event handler declarations for the state variable changes.</param>
            <param name="eventCallers">A StringBuilder to contain event caller methods for the state variable changes.</param>
            <param name="stateVarEventIntercept">A StringBUilder to contain the case statements for the state variable changed event.</param>
            <param name="stateVarTypes">A Dictionary to contain each state variaible name and its code data type.</param>
            <param name="stateVarDesc">The state variable description.</param>
            <param name="friendlyName">The code friendly name of the state variaible.</param>
            <param name="addProp">True to add the actual property accessor.</param>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ServiceGen.GenerateEnumStateVarCode(ManagedUPnP.CodeGen.StringConstants,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.Dictionary{System.String,System.String},ManagedUPnP.Descriptions.StateVariableDescription,System.String,System.Boolean)">
            <summary>
            Generates the code for an enumerated state variable.
            </summary>
            <param name="consts">The string constants created.</param>
            <param name="stateVarProps">A StringBuilder to contain property definitions.</param>
            <param name="stateVarConversion">A StringBuilder to contain the conversion method definitions.</param>
            <param name="stateVarEnums">A StringBuilder to contain the enumerations for the state variables.</param>
            <param name="eventHandlers">A StringBuilder to contain event handler declarations for the state variable changes.</param>
            <param name="eventCallers">A StringBuilder to contain event caller methods for the state variable changes.</param>
            <param name="stateVarEventIntercept">A StringBUilder to contain the case statements for the state variable changed event.</param>
            <param name="enumStateVars">A HashSet containing the names of all enumerated state variables.</param>
            <param name="stateVarTypes">A Dictionary to contain each state variaible name and its code data type.</param>
            <param name="stateVarDesc">The state variable description.</param>
            <param name="friendlyName">The code friendly name of the state variaible.</param>
            <param name="addProp">True to add the actual property accessor.</param>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ServiceGen.GenerateEnumAllowedValuesCode(ManagedUPnP.CodeGen.StringConstants,ManagedUPnP.Descriptions.StateVariableDescription,System.String,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Generates the case statements for the conversion functions 
            for an enumerated state variaible.
            </summary>
            <param name="consts">The string constants created.</param>
            <param name="stateVarDesc">The state variable description.</param>
            <param name="friendlyName">The code friendly name of the state variaible.</param>
            <param name="stateVarEnumValues">A StringBuilder to contain the list of enumeration values.</param>
            <param name="enumStateVarParse">A StringBuilder to contain the list of state variable parse case statements.</param>
            <param name="enumStateVarToString">A StringBuilder to contain the list of state variable to string case statements.</param>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ServiceGen.IsStateVarQueryable(ManagedUPnP.Service,System.Boolean,ManagedUPnP.Descriptions.StateVariableDescription)">
            <summary>
            Determines whether a state variable is queryable and therefore 
            should have its property accessor created.
            </summary>
            <param name="service">The service the state variable belongs to.</param>
            <param name="testStateVars">True to test for query ability, false to allow.</param>
            <param name="stateVarDesc">The state variaible description for which needs to be tested.</param>
            <returns>True if the state variable should have its accessor property created.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ServiceGen.DefaultCodeGenClassName(ManagedUPnP.Service,ManagedUPnP.CodeGen.ICodeGenProvider)">
            <summary>
            Gets the default code generation class name for a service.
            </summary>
            <param name="service">The service to get the class name for.</param>
            <param name="codeGenProvider">The code generation provider to use.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:ManagedUPnP.CodeGen.ServiceGen.GenerateClassFor(ManagedUPnP.Service,System.String,System.String,ManagedUPnP.CodeGen.ClassScope,System.Boolean,System.Boolean)">
            <summary>
            Generates the class code for a service.
            </summary>
            <param name="service">The service to generate for.</param>
            <param name="className">The class name of the service or null to use the service type.</param>
            <param name="namespaceName">The namespace for the class.</param>
            <param name="classScope">The scope for the class.</param>
            <param name="partial">True to make the class partial, false otherwise.</param>
            <param name="testStateVars">
            True to test each state variable to ensure it is 
            usuable for accessing as property, false to include
            all state variables as properties.</param>
            <returns>The string representing the code for the class.</returns>
        </member>
        <member name="P:ManagedUPnP.CodeGen.ServiceGen.CodeGenProvider">
            <summary>
            Gets the code generation provider.
            </summary>
        </member>
    </members>
</doc>
